// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema MeshPolicy
 */
export class MeshPolicy extends ApiObject {
  /**
   * Defines a "MeshPolicy" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: MeshPolicyOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'MeshPolicy',
      apiVersion: 'authentication.istio.io/v1alpha1',
    });
  }
}

/**
 * @schema MeshPolicy
 */
export interface MeshPolicyOptions {
  /**
   * Authentication policy for Istio services. See more details at: https://istio.io/docs/reference/config/security/istio.authentication.v1alpha1.html
   *
   * @schema MeshPolicy#spec
   */
  readonly spec?: MeshPolicySpec;

}

/**
 * Authentication policy for Istio services. See more details at: https://istio.io/docs/reference/config/security/istio.authentication.v1alpha1.html
 *
 * @schema MeshPolicySpec
 */
export interface MeshPolicySpec {
  /**
   * Deprecated.
   *
   * @schema MeshPolicySpec#originIsOptional
   */
  readonly originIsOptional?: boolean;

  /**
   * Deprecated.
   *
   * @schema MeshPolicySpec#origins
   */
  readonly origins?: MeshPolicySpecOrigins[];

  /**
   * Deprecated.
   *
   * @schema MeshPolicySpec#peerIsOptional
   */
  readonly peerIsOptional?: boolean;

  /**
   * List of authentication methods that can be used for peer authentication.
   *
   * @schema MeshPolicySpec#peers
   */
  readonly peers?: MeshPolicySpecPeers[];

  /**
   * Deprecated.
   *
   * @schema MeshPolicySpec#principalBinding
   */
  readonly principalBinding?: MeshPolicySpecPrincipalBinding;

  /**
   * Deprecated.
   *
   * @schema MeshPolicySpec#targets
   */
  readonly targets?: MeshPolicySpecTargets[];

}

/**
 * @schema MeshPolicySpecOrigins
 */
export interface MeshPolicySpecOrigins {
  /**
   * Jwt params for the method.
   *
   * @schema MeshPolicySpecOrigins#jwt
   */
  readonly jwt?: MeshPolicySpecOriginsJwt;

}

/**
 * @schema MeshPolicySpecPeers
 */
export interface MeshPolicySpecPeers {
  /**
   * @schema MeshPolicySpecPeers#jwt
   */
  readonly jwt?: MeshPolicySpecPeersJwt;

  /**
   * Set if mTLS is used.
   *
   * @schema MeshPolicySpecPeers#mtls
   */
  readonly mtls?: MeshPolicySpecPeersMtls;

}

/**
 * Deprecated.
 *
 * @schema MeshPolicySpecPrincipalBinding
 */
export enum MeshPolicySpecPrincipalBinding {
  /** USE_PEER */
  USE_PEER = "USE_PEER",
  /** USE_ORIGIN */
  USE_ORIGIN = "USE_ORIGIN",
}

/**
 * @schema MeshPolicySpecTargets
 */
export interface MeshPolicySpecTargets {
  /**
   * The name must be a short name from the service registry.
   *
   * @schema MeshPolicySpecTargets#name
   */
  readonly name?: string;

  /**
   * Specifies the ports.
   *
   * @schema MeshPolicySpecTargets#ports
   */
  readonly ports?: MeshPolicySpecTargetsPorts[];

}

/**
 * Jwt params for the method.
 *
 * @schema MeshPolicySpecOriginsJwt
 */
export interface MeshPolicySpecOriginsJwt {
  /**
   * @schema MeshPolicySpecOriginsJwt#audiences
   */
  readonly audiences?: string[];

  /**
   * Identifies the issuer that issued the JWT.
   *
   * @schema MeshPolicySpecOriginsJwt#issuer
   */
  readonly issuer?: string;

  /**
   * JSON Web Key Set of public keys to validate signature of the JWT.
   *
   * @schema MeshPolicySpecOriginsJwt#jwks
   */
  readonly jwks?: string;

  /**
   * @schema MeshPolicySpecOriginsJwt#jwksUri
   */
  readonly jwksUri?: string;

  /**
   * JWT is sent in a request header.
   *
   * @schema MeshPolicySpecOriginsJwt#jwtHeaders
   */
  readonly jwtHeaders?: string[];

  /**
   * JWT is sent in a query parameter.
   *
   * @schema MeshPolicySpecOriginsJwt#jwtParams
   */
  readonly jwtParams?: string[];

  /**
   * @schema MeshPolicySpecOriginsJwt#triggerRules
   */
  readonly triggerRules?: MeshPolicySpecOriginsJwtTriggerRules[];

}

/**
 * @schema MeshPolicySpecPeersJwt
 */
export interface MeshPolicySpecPeersJwt {
  /**
   * @schema MeshPolicySpecPeersJwt#audiences
   */
  readonly audiences?: string[];

  /**
   * Identifies the issuer that issued the JWT.
   *
   * @schema MeshPolicySpecPeersJwt#issuer
   */
  readonly issuer?: string;

  /**
   * JSON Web Key Set of public keys to validate signature of the JWT.
   *
   * @schema MeshPolicySpecPeersJwt#jwks
   */
  readonly jwks?: string;

  /**
   * @schema MeshPolicySpecPeersJwt#jwksUri
   */
  readonly jwksUri?: string;

  /**
   * JWT is sent in a request header.
   *
   * @schema MeshPolicySpecPeersJwt#jwtHeaders
   */
  readonly jwtHeaders?: string[];

  /**
   * JWT is sent in a query parameter.
   *
   * @schema MeshPolicySpecPeersJwt#jwtParams
   */
  readonly jwtParams?: string[];

  /**
   * @schema MeshPolicySpecPeersJwt#triggerRules
   */
  readonly triggerRules?: MeshPolicySpecPeersJwtTriggerRules[];

}

/**
 * Set if mTLS is used.
 *
 * @schema MeshPolicySpecPeersMtls
 */
export interface MeshPolicySpecPeersMtls {
  /**
   * Deprecated.
   *
   * @schema MeshPolicySpecPeersMtls#allowTls
   */
  readonly allowTls?: boolean;

  /**
   * Defines the mode of mTLS authentication.
   *
   * @schema MeshPolicySpecPeersMtls#mode
   */
  readonly mode?: MeshPolicySpecPeersMtlsMode;

}

/**
 * @schema MeshPolicySpecTargetsPorts
 */
export interface MeshPolicySpecTargetsPorts {
  /**
   * @schema MeshPolicySpecTargetsPorts#name
   */
  readonly name?: string;

  /**
   * @schema MeshPolicySpecTargetsPorts#number
   */
  readonly number?: number;

}

/**
 * @schema MeshPolicySpecOriginsJwtTriggerRules
 */
export interface MeshPolicySpecOriginsJwtTriggerRules {
  /**
   * List of paths to be excluded from the request.
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRules#excludedPaths
   */
  readonly excludedPaths?: MeshPolicySpecOriginsJwtTriggerRulesExcludedPaths[];

  /**
   * List of paths that the request must include.
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRules#includedPaths
   */
  readonly includedPaths?: MeshPolicySpecOriginsJwtTriggerRulesIncludedPaths[];

}

/**
 * @schema MeshPolicySpecPeersJwtTriggerRules
 */
export interface MeshPolicySpecPeersJwtTriggerRules {
  /**
   * List of paths to be excluded from the request.
   *
   * @schema MeshPolicySpecPeersJwtTriggerRules#excludedPaths
   */
  readonly excludedPaths?: MeshPolicySpecPeersJwtTriggerRulesExcludedPaths[];

  /**
   * List of paths that the request must include.
   *
   * @schema MeshPolicySpecPeersJwtTriggerRules#includedPaths
   */
  readonly includedPaths?: MeshPolicySpecPeersJwtTriggerRulesIncludedPaths[];

}

/**
 * Defines the mode of mTLS authentication.
 *
 * @schema MeshPolicySpecPeersMtlsMode
 */
export enum MeshPolicySpecPeersMtlsMode {
  /** STRICT */
  STRICT = "STRICT",
  /** PERMISSIVE */
  PERMISSIVE = "PERMISSIVE",
}

/**
 * @schema MeshPolicySpecOriginsJwtTriggerRulesExcludedPaths
 */
export interface MeshPolicySpecOriginsJwtTriggerRulesExcludedPaths {
  /**
   * exact string match.
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRulesExcludedPaths#exact
   */
  readonly exact?: string;

  /**
   * prefix-based match.
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRulesExcludedPaths#prefix
   */
  readonly prefix?: string;

  /**
   * ECMAscript style regex-based match as defined by [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript).
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRulesExcludedPaths#regex
   */
  readonly regex?: string;

  /**
   * suffix-based match.
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRulesExcludedPaths#suffix
   */
  readonly suffix?: string;

}

/**
 * @schema MeshPolicySpecOriginsJwtTriggerRulesIncludedPaths
 */
export interface MeshPolicySpecOriginsJwtTriggerRulesIncludedPaths {
  /**
   * exact string match.
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRulesIncludedPaths#exact
   */
  readonly exact?: string;

  /**
   * prefix-based match.
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRulesIncludedPaths#prefix
   */
  readonly prefix?: string;

  /**
   * ECMAscript style regex-based match as defined by [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript).
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRulesIncludedPaths#regex
   */
  readonly regex?: string;

  /**
   * suffix-based match.
   *
   * @schema MeshPolicySpecOriginsJwtTriggerRulesIncludedPaths#suffix
   */
  readonly suffix?: string;

}

/**
 * @schema MeshPolicySpecPeersJwtTriggerRulesExcludedPaths
 */
export interface MeshPolicySpecPeersJwtTriggerRulesExcludedPaths {
  /**
   * exact string match.
   *
   * @schema MeshPolicySpecPeersJwtTriggerRulesExcludedPaths#exact
   */
  readonly exact?: string;

  /**
   * prefix-based match.
   *
   * @schema MeshPolicySpecPeersJwtTriggerRulesExcludedPaths#prefix
   */
  readonly prefix?: string;

  /**
   * ECMAscript style regex-based match as defined by [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript).
   *
   * @schema MeshPolicySpecPeersJwtTriggerRulesExcludedPaths#regex
   */
  readonly regex?: string;

  /**
   * suffix-based match.
   *
   * @schema MeshPolicySpecPeersJwtTriggerRulesExcludedPaths#suffix
   */
  readonly suffix?: string;

}

/**
 * @schema MeshPolicySpecPeersJwtTriggerRulesIncludedPaths
 */
export interface MeshPolicySpecPeersJwtTriggerRulesIncludedPaths {
  /**
   * exact string match.
   *
   * @schema MeshPolicySpecPeersJwtTriggerRulesIncludedPaths#exact
   */
  readonly exact?: string;

  /**
   * prefix-based match.
   *
   * @schema MeshPolicySpecPeersJwtTriggerRulesIncludedPaths#prefix
   */
  readonly prefix?: string;

  /**
   * ECMAscript style regex-based match as defined by [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript).
   *
   * @schema MeshPolicySpecPeersJwtTriggerRulesIncludedPaths#regex
   */
  readonly regex?: string;

  /**
   * suffix-based match.
   *
   * @schema MeshPolicySpecPeersJwtTriggerRulesIncludedPaths#suffix
   */
  readonly suffix?: string;

}

