// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * TCPRoute is the Schema for the TCPRoute resource.
 *
 * @schema TCPRoute
 */
export class TcpRoute extends ApiObject {
  /**
   * Defines a "TCPRoute" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: TcpRouteOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'TCPRoute',
      apiVersion: 'networking.x-k8s.io/v1alpha1',
    });
  }
}

/**
 * TCPRoute is the Schema for the TCPRoute resource.
 *
 * @schema TCPRoute
 */
export interface TcpRouteOptions {
  /**
   * @schema TCPRoute#metadata
   */
  readonly metadata?: any;

  /**
   * TCPRouteSpec defines the desired state of TCPRoute
   *
   * @schema TCPRoute#spec
   */
  readonly spec?: TcpRouteSpec;

}

/**
 * TCPRouteSpec defines the desired state of TCPRoute
 *
 * @schema TcpRouteSpec
 */
export interface TcpRouteSpec {
  /**
   * Rules are a list of TCP matchers and actions.
   *
   * @schema TcpRouteSpec#rules
   */
  readonly rules: TcpRouteSpecRules[];

}

/**
 * TCPRouteRule is the configuration for a given rule.
 *
 * @schema TcpRouteSpecRules
 */
export interface TcpRouteSpecRules {
  /**
   * Action defines what happens to the connection.
   *
   * @schema TcpRouteSpecRules#action
   */
  readonly action: TcpRouteSpecRulesAction;

  /**
   * Matches define conditions used for matching the rule against incoming TCP connections. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied.
   *
   * @schema TcpRouteSpecRules#matches
   */
  readonly matches?: TcpRouteSpecRulesMatches[];

}

/**
 * Action defines what happens to the connection.
 *
 * @schema TcpRouteSpecRulesAction
 */
export interface TcpRouteSpecRulesAction {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the "action" behavior.  The resource may be "configmaps" (use the empty string for the group) or an implementation-defined resource (for example, resource "myrouteactions" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "configmaps".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the TCPRoute will be true. 
 Support: custom
   *
   * @schema TcpRouteSpecRulesAction#extensionRef
   */
  readonly extensionRef?: TcpRouteSpecRulesActionExtensionRef;

  /**
   * ForwardTo sends requests to the referenced object(s). The resource may be "services" (omit or use the empty string for the group), or an implementation may support other resources (for example, resource "myroutetargets" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "services".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the HTTPRoute will be true. 
 Support: core
   *
   * @schema TcpRouteSpecRulesAction#forwardTo
   */
  readonly forwardTo: TcpRouteSpecRulesActionForwardTo[];

}

/**
 * TCPRouteMatch defines the predicate used to match connections to a given action.
 *
 * @schema TcpRouteSpecRulesMatches
 */
export interface TcpRouteSpecRulesMatches {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the "match" behavior.  The resource may be "configmap" (use the empty string for the group) or an implementation-defined resource (for example, resource "myroutematchers" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "configmaps".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the TCPRoute will be true. 
 Support: custom
   *
   * @schema TcpRouteSpecRulesMatches#extensionRef
   */
  readonly extensionRef?: TcpRouteSpecRulesMatchesExtensionRef;

}

/**
 * ExtensionRef is an optional, implementation-specific extension to the "action" behavior.  The resource may be "configmaps" (use the empty string for the group) or an implementation-defined resource (for example, resource "myrouteactions" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "configmaps".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the TCPRoute will be true. 
 Support: custom
 *
 * @schema TcpRouteSpecRulesActionExtensionRef
 */
export interface TcpRouteSpecRulesActionExtensionRef {
  /**
   * Group is the API group name of the referent.
   *
   * @schema TcpRouteSpecRulesActionExtensionRef#group
   */
  readonly group: string;

  /**
   * Name is the name of the referent.
   *
   * @schema TcpRouteSpecRulesActionExtensionRef#name
   */
  readonly name: string;

  /**
   * Resource is the API resource name of the referent.
   *
   * @schema TcpRouteSpecRulesActionExtensionRef#resource
   */
  readonly resource: string;

}

/**
 * GenericForwardToTarget identifies a target object within a known namespace.
 *
 * @schema TcpRouteSpecRulesActionForwardTo
 */
export interface TcpRouteSpecRulesActionForwardTo {
  /**
   * TargetPort specifies the destination port number to use for the TargetRef. If unspecified and TargetRef is a Service object consisting of a single port definition, that port will be used. If unspecified and TargetRef is a Service object consisting of multiple port definitions, an error is surfaced in status. 
 Support: Core
   *
   * @schema TcpRouteSpecRulesActionForwardTo#targetPort
   */
  readonly targetPort?: number;

  /**
   * TargetRef is an object reference to forward matched requests to. The resource may be "services" (omit or use the empty string for the group), or an implementation may support other resources (for example, resource "myroutetargets" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "services".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the HTTPRoute will be true. 
 Support: Core (Kubernetes Services) Support: Implementation-specific (Other resource types)
   *
   * @schema TcpRouteSpecRulesActionForwardTo#targetRef
   */
  readonly targetRef: TcpRouteSpecRulesActionForwardToTargetRef;

  /**
   * Weight specifies the proportion of traffic forwarded to a targetRef, computed as weight/(sum of all weights in targetRefs). Weight is not a percentage and the sum of weights does not need to equal 100. The following example (in yaml) sends 70% of traffic to service "my-trafficsplit-sv1" and 30% of the traffic to service "my-trafficsplit-sv2": 
   forwardTo:     - targetRef:         name: my-trafficsplit-sv1         weight: 70     - targetRef:         name: my-trafficsplit-sv2         weight: 30 
 If only one targetRef is specified, 100% of the traffic is forwarded to the targetRef. If unspecified, weight defaults to 1. 
 Support: Core (HTTPRoute) Support: Extended (TCPRoute)
   *
   * @schema TcpRouteSpecRulesActionForwardTo#weight
   */
  readonly weight?: number;

}

/**
 * ExtensionRef is an optional, implementation-specific extension to the "match" behavior.  The resource may be "configmap" (use the empty string for the group) or an implementation-defined resource (for example, resource "myroutematchers" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "configmaps".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the TCPRoute will be true. 
 Support: custom
 *
 * @schema TcpRouteSpecRulesMatchesExtensionRef
 */
export interface TcpRouteSpecRulesMatchesExtensionRef {
  /**
   * Group is the API group name of the referent.
   *
   * @schema TcpRouteSpecRulesMatchesExtensionRef#group
   */
  readonly group: string;

  /**
   * Name is the name of the referent.
   *
   * @schema TcpRouteSpecRulesMatchesExtensionRef#name
   */
  readonly name: string;

  /**
   * Resource is the API resource name of the referent.
   *
   * @schema TcpRouteSpecRulesMatchesExtensionRef#resource
   */
  readonly resource: string;

}

/**
 * TargetRef is an object reference to forward matched requests to. The resource may be "services" (omit or use the empty string for the group), or an implementation may support other resources (for example, resource "myroutetargets" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "services".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the HTTPRoute will be true. 
 Support: Core (Kubernetes Services) Support: Implementation-specific (Other resource types)
 *
 * @schema TcpRouteSpecRulesActionForwardToTargetRef
 */
export interface TcpRouteSpecRulesActionForwardToTargetRef {
  /**
   * Group is the group of the referent.  Omitting the value or specifying the empty string indicates the core API group.  For example, use the following to specify a service: 
 fooRef:   resource: services   name: myservice 
 Otherwise, if the core API group is not desired, specify the desired group: 
 fooRef:   group: acme.io   resource: foos   name: myfoo
   *
   * @schema TcpRouteSpecRulesActionForwardToTargetRef#group
   */
  readonly group?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema TcpRouteSpecRulesActionForwardToTargetRef#name
   */
  readonly name: string;

  /**
   * Resource is the API resource name of the referent. Omitting the value or specifying the empty string indicates the services resource. For example, use the following to specify a services resource: 
 fooRef:   name: myservice 
 Otherwise, if the services resource is not desired, specify the desired group: 
 fooRef:   group: acme.io   resource: foos   name: myfoo
   *
   * @schema TcpRouteSpecRulesActionForwardToTargetRef#resource
   */
  readonly resource?: string;

}

