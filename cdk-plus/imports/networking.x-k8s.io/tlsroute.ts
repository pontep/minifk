// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * TLSRoute is the Schema for the TLSRoute resource. TLSRoute is similar to TCPRoute but can be configured to match against TLS-specific metadata. This allows more flexibility in matching streams for in a given TLS listener. 
 If you need to forward traffic to a single target for a TLS listener, you could chose to use a TCPRoute with a TLS listener.
 *
 * @schema TLSRoute
 */
export class TlsRoute extends ApiObject {
  /**
   * Defines a "TLSRoute" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: TlsRouteOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'TLSRoute',
      apiVersion: 'networking.x-k8s.io/v1alpha1',
    });
  }
}

/**
 * TLSRoute is the Schema for the TLSRoute resource. TLSRoute is similar to TCPRoute but can be configured to match against TLS-specific metadata. This allows more flexibility in matching streams for in a given TLS listener. 
 If you need to forward traffic to a single target for a TLS listener, you could chose to use a TCPRoute with a TLS listener.
 *
 * @schema TLSRoute
 */
export interface TlsRouteOptions {
  /**
   * @schema TLSRoute#metadata
   */
  readonly metadata?: any;

  /**
   * TLSRouteSpec defines the desired state of TLSRoute
   *
   * @schema TLSRoute#spec
   */
  readonly spec?: TlsRouteSpec;

}

/**
 * TLSRouteSpec defines the desired state of TLSRoute
 *
 * @schema TlsRouteSpec
 */
export interface TlsRouteSpec {
  /**
   * Rules are a list of TLS matchers and actions.
   *
   * @schema TlsRouteSpec#rules
   */
  readonly rules: TlsRouteSpecRules[];

}

/**
 * TLSRouteRule is the configuration for a given rule.
 *
 * @schema TlsRouteSpecRules
 */
export interface TlsRouteSpecRules {
  /**
   * Action defines what happens to the connection.
   *
   * @schema TlsRouteSpecRules#action
   */
  readonly action: TlsRouteSpecRulesAction;

  /**
   * Matches define conditions used for matching the rule against incoming TLS handshake. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied.
   *
   * @schema TlsRouteSpecRules#matches
   */
  readonly matches?: TlsRouteSpecRulesMatches[];

}

/**
 * Action defines what happens to the connection.
 *
 * @schema TlsRouteSpecRulesAction
 */
export interface TlsRouteSpecRulesAction {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the "action" behavior.  The resource may be "configmaps" (use the empty string for the group) or an implementation-defined resource (for example, resource "myrouteactions" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "configmaps".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the TLSRoute will be true. 
 Support: custom
   *
   * @schema TlsRouteSpecRulesAction#extensionRef
   */
  readonly extensionRef?: TlsRouteSpecRulesActionExtensionRef;

  /**
   * ForwardTo sends requests to the referenced object(s). The resource may be "services" (omit or use the empty string for the group), or an implementation may support other resources (for example, resource "myroutetargets" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "services".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the HTTPRoute will be true. 
 Support: core
   *
   * @schema TlsRouteSpecRulesAction#forwardTo
   */
  readonly forwardTo: TlsRouteSpecRulesActionForwardTo[];

}

/**
 * TLSRouteMatch defines the predicate used to match connections to a given action.
 *
 * @schema TlsRouteSpecRulesMatches
 */
export interface TlsRouteSpecRulesMatches {
  /**
   * ExtensionRef is an optional, implementation-specific extension to the "match" behavior.  The resource may be "configmap" (use the empty string for the group) or an implementation-defined resource (for example, resource "myroutematchers" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "configmaps".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the TLSRoute will be true. 
 Support: custom
   *
   * @schema TlsRouteSpecRulesMatches#extensionRef
   */
  readonly extensionRef?: TlsRouteSpecRulesMatchesExtensionRef;

  /**
   * SNIs defines a set of SNI names that should match against the SNI attribute of TLS CLientHello message in TLS handshake. 
 SNI can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.example.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.example.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following order: 
 1. If SNI is precise, the request matches this rule if    the SNI in ClientHello is equal to one of the defined SNIs. 2. If SNI is a wildcard, then the request matches this rule if    the SNI is to equal to the suffix    (removing the first label) of the wildcard rule. 
 Support: core
   *
   * @schema TlsRouteSpecRulesMatches#snis
   */
  readonly snis?: string[];

}

/**
 * ExtensionRef is an optional, implementation-specific extension to the "action" behavior.  The resource may be "configmaps" (use the empty string for the group) or an implementation-defined resource (for example, resource "myrouteactions" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "configmaps".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the TLSRoute will be true. 
 Support: custom
 *
 * @schema TlsRouteSpecRulesActionExtensionRef
 */
export interface TlsRouteSpecRulesActionExtensionRef {
  /**
   * Group is the API group name of the referent.
   *
   * @schema TlsRouteSpecRulesActionExtensionRef#group
   */
  readonly group: string;

  /**
   * Name is the name of the referent.
   *
   * @schema TlsRouteSpecRulesActionExtensionRef#name
   */
  readonly name: string;

  /**
   * Resource is the API resource name of the referent.
   *
   * @schema TlsRouteSpecRulesActionExtensionRef#resource
   */
  readonly resource: string;

}

/**
 * GenericForwardToTarget identifies a target object within a known namespace.
 *
 * @schema TlsRouteSpecRulesActionForwardTo
 */
export interface TlsRouteSpecRulesActionForwardTo {
  /**
   * TargetPort specifies the destination port number to use for the TargetRef. If unspecified and TargetRef is a Service object consisting of a single port definition, that port will be used. If unspecified and TargetRef is a Service object consisting of multiple port definitions, an error is surfaced in status. 
 Support: Core
   *
   * @schema TlsRouteSpecRulesActionForwardTo#targetPort
   */
  readonly targetPort?: number;

  /**
   * TargetRef is an object reference to forward matched requests to. The resource may be "services" (omit or use the empty string for the group), or an implementation may support other resources (for example, resource "myroutetargets" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "services".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the HTTPRoute will be true. 
 Support: Core (Kubernetes Services) Support: Implementation-specific (Other resource types)
   *
   * @schema TlsRouteSpecRulesActionForwardTo#targetRef
   */
  readonly targetRef: TlsRouteSpecRulesActionForwardToTargetRef;

  /**
   * Weight specifies the proportion of traffic forwarded to a targetRef, computed as weight/(sum of all weights in targetRefs). Weight is not a percentage and the sum of weights does not need to equal 100. The following example (in yaml) sends 70% of traffic to service "my-trafficsplit-sv1" and 30% of the traffic to service "my-trafficsplit-sv2": 
   forwardTo:     - targetRef:         name: my-trafficsplit-sv1         weight: 70     - targetRef:         name: my-trafficsplit-sv2         weight: 30 
 If only one targetRef is specified, 100% of the traffic is forwarded to the targetRef. If unspecified, weight defaults to 1. 
 Support: Core (HTTPRoute) Support: Extended (TCPRoute)
   *
   * @schema TlsRouteSpecRulesActionForwardTo#weight
   */
  readonly weight?: number;

}

/**
 * ExtensionRef is an optional, implementation-specific extension to the "match" behavior.  The resource may be "configmap" (use the empty string for the group) or an implementation-defined resource (for example, resource "myroutematchers" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "configmaps".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the TLSRoute will be true. 
 Support: custom
 *
 * @schema TlsRouteSpecRulesMatchesExtensionRef
 */
export interface TlsRouteSpecRulesMatchesExtensionRef {
  /**
   * Group is the API group name of the referent.
   *
   * @schema TlsRouteSpecRulesMatchesExtensionRef#group
   */
  readonly group: string;

  /**
   * Name is the name of the referent.
   *
   * @schema TlsRouteSpecRulesMatchesExtensionRef#name
   */
  readonly name: string;

  /**
   * Resource is the API resource name of the referent.
   *
   * @schema TlsRouteSpecRulesMatchesExtensionRef#resource
   */
  readonly resource: string;

}

/**
 * TargetRef is an object reference to forward matched requests to. The resource may be "services" (omit or use the empty string for the group), or an implementation may support other resources (for example, resource "myroutetargets" in group "networking.acme.io"). Omitting or specifying the empty string for both the resource and group indicates that the resource is "services".  If the referent cannot be found, the "InvalidRoutes" status condition on any Gateway that includes the HTTPRoute will be true. 
 Support: Core (Kubernetes Services) Support: Implementation-specific (Other resource types)
 *
 * @schema TlsRouteSpecRulesActionForwardToTargetRef
 */
export interface TlsRouteSpecRulesActionForwardToTargetRef {
  /**
   * Group is the group of the referent.  Omitting the value or specifying the empty string indicates the core API group.  For example, use the following to specify a service: 
 fooRef:   resource: services   name: myservice 
 Otherwise, if the core API group is not desired, specify the desired group: 
 fooRef:   group: acme.io   resource: foos   name: myfoo
   *
   * @schema TlsRouteSpecRulesActionForwardToTargetRef#group
   */
  readonly group?: string;

  /**
   * Name is the name of the referent.
   *
   * @schema TlsRouteSpecRulesActionForwardToTargetRef#name
   */
  readonly name: string;

  /**
   * Resource is the API resource name of the referent. Omitting the value or specifying the empty string indicates the services resource. For example, use the following to specify a services resource: 
 fooRef:   name: myservice 
 Otherwise, if the services resource is not desired, specify the desired group: 
 fooRef:   group: acme.io   resource: foos   name: myfoo
   *
   * @schema TlsRouteSpecRulesActionForwardToTargetRef#resource
   */
  readonly resource?: string;

}

