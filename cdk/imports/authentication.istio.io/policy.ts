// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema Policy
 */
export class Policy extends ApiObject {
  /**
   * Defines a "Policy" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: PolicyOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'Policy',
      apiVersion: 'authentication.istio.io/v1alpha1',
    });
  }
}

/**
 * @schema Policy
 */
export interface PolicyOptions {
  /**
   * Authentication policy for Istio services. See more details at: https://istio.io/docs/reference/config/security/istio.authentication.v1alpha1.html
   *
   * @schema Policy#spec
   */
  readonly spec?: PolicySpec;

}

/**
 * Authentication policy for Istio services. See more details at: https://istio.io/docs/reference/config/security/istio.authentication.v1alpha1.html
 *
 * @schema PolicySpec
 */
export interface PolicySpec {
  /**
   * Deprecated.
   *
   * @schema PolicySpec#originIsOptional
   */
  readonly originIsOptional?: boolean;

  /**
   * Deprecated.
   *
   * @schema PolicySpec#origins
   */
  readonly origins?: PolicySpecOrigins[];

  /**
   * Deprecated.
   *
   * @schema PolicySpec#peerIsOptional
   */
  readonly peerIsOptional?: boolean;

  /**
   * List of authentication methods that can be used for peer authentication.
   *
   * @schema PolicySpec#peers
   */
  readonly peers?: PolicySpecPeers[];

  /**
   * Deprecated.
   *
   * @schema PolicySpec#principalBinding
   */
  readonly principalBinding?: PolicySpecPrincipalBinding;

  /**
   * Deprecated.
   *
   * @schema PolicySpec#targets
   */
  readonly targets?: PolicySpecTargets[];

}

/**
 * @schema PolicySpecOrigins
 */
export interface PolicySpecOrigins {
  /**
   * Jwt params for the method.
   *
   * @schema PolicySpecOrigins#jwt
   */
  readonly jwt?: PolicySpecOriginsJwt;

}

/**
 * @schema PolicySpecPeers
 */
export interface PolicySpecPeers {
  /**
   * @schema PolicySpecPeers#jwt
   */
  readonly jwt?: PolicySpecPeersJwt;

  /**
   * Set if mTLS is used.
   *
   * @schema PolicySpecPeers#mtls
   */
  readonly mtls?: PolicySpecPeersMtls;

}

/**
 * Deprecated.
 *
 * @schema PolicySpecPrincipalBinding
 */
export enum PolicySpecPrincipalBinding {
  /** USE_PEER */
  USE_PEER = "USE_PEER",
  /** USE_ORIGIN */
  USE_ORIGIN = "USE_ORIGIN",
}

/**
 * @schema PolicySpecTargets
 */
export interface PolicySpecTargets {
  /**
   * The name must be a short name from the service registry.
   *
   * @schema PolicySpecTargets#name
   */
  readonly name?: string;

  /**
   * Specifies the ports.
   *
   * @schema PolicySpecTargets#ports
   */
  readonly ports?: PolicySpecTargetsPorts[];

}

/**
 * Jwt params for the method.
 *
 * @schema PolicySpecOriginsJwt
 */
export interface PolicySpecOriginsJwt {
  /**
   * @schema PolicySpecOriginsJwt#audiences
   */
  readonly audiences?: string[];

  /**
   * Identifies the issuer that issued the JWT.
   *
   * @schema PolicySpecOriginsJwt#issuer
   */
  readonly issuer?: string;

  /**
   * JSON Web Key Set of public keys to validate signature of the JWT.
   *
   * @schema PolicySpecOriginsJwt#jwks
   */
  readonly jwks?: string;

  /**
   * @schema PolicySpecOriginsJwt#jwksUri
   */
  readonly jwksUri?: string;

  /**
   * JWT is sent in a request header.
   *
   * @schema PolicySpecOriginsJwt#jwtHeaders
   */
  readonly jwtHeaders?: string[];

  /**
   * JWT is sent in a query parameter.
   *
   * @schema PolicySpecOriginsJwt#jwtParams
   */
  readonly jwtParams?: string[];

  /**
   * @schema PolicySpecOriginsJwt#triggerRules
   */
  readonly triggerRules?: PolicySpecOriginsJwtTriggerRules[];

}

/**
 * @schema PolicySpecPeersJwt
 */
export interface PolicySpecPeersJwt {
  /**
   * @schema PolicySpecPeersJwt#audiences
   */
  readonly audiences?: string[];

  /**
   * Identifies the issuer that issued the JWT.
   *
   * @schema PolicySpecPeersJwt#issuer
   */
  readonly issuer?: string;

  /**
   * JSON Web Key Set of public keys to validate signature of the JWT.
   *
   * @schema PolicySpecPeersJwt#jwks
   */
  readonly jwks?: string;

  /**
   * @schema PolicySpecPeersJwt#jwksUri
   */
  readonly jwksUri?: string;

  /**
   * JWT is sent in a request header.
   *
   * @schema PolicySpecPeersJwt#jwtHeaders
   */
  readonly jwtHeaders?: string[];

  /**
   * JWT is sent in a query parameter.
   *
   * @schema PolicySpecPeersJwt#jwtParams
   */
  readonly jwtParams?: string[];

  /**
   * @schema PolicySpecPeersJwt#triggerRules
   */
  readonly triggerRules?: PolicySpecPeersJwtTriggerRules[];

}

/**
 * Set if mTLS is used.
 *
 * @schema PolicySpecPeersMtls
 */
export interface PolicySpecPeersMtls {
  /**
   * Deprecated.
   *
   * @schema PolicySpecPeersMtls#allowTls
   */
  readonly allowTls?: boolean;

  /**
   * Defines the mode of mTLS authentication.
   *
   * @schema PolicySpecPeersMtls#mode
   */
  readonly mode?: PolicySpecPeersMtlsMode;

}

/**
 * @schema PolicySpecTargetsPorts
 */
export interface PolicySpecTargetsPorts {
  /**
   * @schema PolicySpecTargetsPorts#name
   */
  readonly name?: string;

  /**
   * @schema PolicySpecTargetsPorts#number
   */
  readonly number?: number;

}

/**
 * @schema PolicySpecOriginsJwtTriggerRules
 */
export interface PolicySpecOriginsJwtTriggerRules {
  /**
   * List of paths to be excluded from the request.
   *
   * @schema PolicySpecOriginsJwtTriggerRules#excludedPaths
   */
  readonly excludedPaths?: PolicySpecOriginsJwtTriggerRulesExcludedPaths[];

  /**
   * List of paths that the request must include.
   *
   * @schema PolicySpecOriginsJwtTriggerRules#includedPaths
   */
  readonly includedPaths?: PolicySpecOriginsJwtTriggerRulesIncludedPaths[];

}

/**
 * @schema PolicySpecPeersJwtTriggerRules
 */
export interface PolicySpecPeersJwtTriggerRules {
  /**
   * List of paths to be excluded from the request.
   *
   * @schema PolicySpecPeersJwtTriggerRules#excludedPaths
   */
  readonly excludedPaths?: PolicySpecPeersJwtTriggerRulesExcludedPaths[];

  /**
   * List of paths that the request must include.
   *
   * @schema PolicySpecPeersJwtTriggerRules#includedPaths
   */
  readonly includedPaths?: PolicySpecPeersJwtTriggerRulesIncludedPaths[];

}

/**
 * Defines the mode of mTLS authentication.
 *
 * @schema PolicySpecPeersMtlsMode
 */
export enum PolicySpecPeersMtlsMode {
  /** STRICT */
  STRICT = "STRICT",
  /** PERMISSIVE */
  PERMISSIVE = "PERMISSIVE",
}

/**
 * @schema PolicySpecOriginsJwtTriggerRulesExcludedPaths
 */
export interface PolicySpecOriginsJwtTriggerRulesExcludedPaths {
  /**
   * exact string match.
   *
   * @schema PolicySpecOriginsJwtTriggerRulesExcludedPaths#exact
   */
  readonly exact?: string;

  /**
   * prefix-based match.
   *
   * @schema PolicySpecOriginsJwtTriggerRulesExcludedPaths#prefix
   */
  readonly prefix?: string;

  /**
   * ECMAscript style regex-based match as defined by [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript).
   *
   * @schema PolicySpecOriginsJwtTriggerRulesExcludedPaths#regex
   */
  readonly regex?: string;

  /**
   * suffix-based match.
   *
   * @schema PolicySpecOriginsJwtTriggerRulesExcludedPaths#suffix
   */
  readonly suffix?: string;

}

/**
 * @schema PolicySpecOriginsJwtTriggerRulesIncludedPaths
 */
export interface PolicySpecOriginsJwtTriggerRulesIncludedPaths {
  /**
   * exact string match.
   *
   * @schema PolicySpecOriginsJwtTriggerRulesIncludedPaths#exact
   */
  readonly exact?: string;

  /**
   * prefix-based match.
   *
   * @schema PolicySpecOriginsJwtTriggerRulesIncludedPaths#prefix
   */
  readonly prefix?: string;

  /**
   * ECMAscript style regex-based match as defined by [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript).
   *
   * @schema PolicySpecOriginsJwtTriggerRulesIncludedPaths#regex
   */
  readonly regex?: string;

  /**
   * suffix-based match.
   *
   * @schema PolicySpecOriginsJwtTriggerRulesIncludedPaths#suffix
   */
  readonly suffix?: string;

}

/**
 * @schema PolicySpecPeersJwtTriggerRulesExcludedPaths
 */
export interface PolicySpecPeersJwtTriggerRulesExcludedPaths {
  /**
   * exact string match.
   *
   * @schema PolicySpecPeersJwtTriggerRulesExcludedPaths#exact
   */
  readonly exact?: string;

  /**
   * prefix-based match.
   *
   * @schema PolicySpecPeersJwtTriggerRulesExcludedPaths#prefix
   */
  readonly prefix?: string;

  /**
   * ECMAscript style regex-based match as defined by [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript).
   *
   * @schema PolicySpecPeersJwtTriggerRulesExcludedPaths#regex
   */
  readonly regex?: string;

  /**
   * suffix-based match.
   *
   * @schema PolicySpecPeersJwtTriggerRulesExcludedPaths#suffix
   */
  readonly suffix?: string;

}

/**
 * @schema PolicySpecPeersJwtTriggerRulesIncludedPaths
 */
export interface PolicySpecPeersJwtTriggerRulesIncludedPaths {
  /**
   * exact string match.
   *
   * @schema PolicySpecPeersJwtTriggerRulesIncludedPaths#exact
   */
  readonly exact?: string;

  /**
   * prefix-based match.
   *
   * @schema PolicySpecPeersJwtTriggerRulesIncludedPaths#prefix
   */
  readonly prefix?: string;

  /**
   * ECMAscript style regex-based match as defined by [EDCA-262](http://en.cppreference.com/w/cpp/regex/ecmascript).
   *
   * @schema PolicySpecPeersJwtTriggerRulesIncludedPaths#regex
   */
  readonly regex?: string;

  /**
   * suffix-based match.
   *
   * @schema PolicySpecPeersJwtTriggerRulesIncludedPaths#suffix
   */
  readonly suffix?: string;

}

