// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema ServiceRole
 */
export class ServiceRole extends ApiObject {
  /**
   * Defines a "ServiceRole" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ServiceRoleOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'ServiceRole',
      apiVersion: 'rbac.istio.io/v1alpha1',
    });
  }
}

/**
 * @schema ServiceRole
 */
export interface ServiceRoleOptions {
  /**
   * Configuration for Role Based Access Control. See more details at: https://istio.io/docs/reference/config/security/istio.rbac.v1alpha1.html
   *
   * @schema ServiceRole#spec
   */
  readonly spec?: ServiceRoleSpec;

}

/**
 * Configuration for Role Based Access Control. See more details at: https://istio.io/docs/reference/config/security/istio.rbac.v1alpha1.html
 *
 * @schema ServiceRoleSpec
 */
export interface ServiceRoleSpec {
  /**
   * The set of access rules (permissions) that the role has.
   *
   * @schema ServiceRoleSpec#rules
   */
  readonly rules?: ServiceRoleSpecRules[];

}

/**
 * @schema ServiceRoleSpecRules
 */
export interface ServiceRoleSpecRules {
  /**
   * Optional.
   *
   * @schema ServiceRoleSpecRules#constraints
   */
  readonly constraints?: ServiceRoleSpecRulesConstraints[];

  /**
   * @schema ServiceRoleSpecRules#hosts
   */
  readonly hosts?: string[];

  /**
   * Optional.
   *
   * @schema ServiceRoleSpecRules#methods
   */
  readonly methods?: string[];

  /**
   * @schema ServiceRoleSpecRules#notHosts
   */
  readonly notHosts?: string[];

  /**
   * @schema ServiceRoleSpecRules#notMethods
   */
  readonly notMethods?: string[];

  /**
   * @schema ServiceRoleSpecRules#notPaths
   */
  readonly notPaths?: string[];

  /**
   * @schema ServiceRoleSpecRules#notPorts
   */
  readonly notPorts?: number[];

  /**
   * Optional.
   *
   * @schema ServiceRoleSpecRules#paths
   */
  readonly paths?: string[];

  /**
   * @schema ServiceRoleSpecRules#ports
   */
  readonly ports?: number[];

  /**
   * A list of service names.
   *
   * @schema ServiceRoleSpecRules#services
   */
  readonly services?: string[];

}

/**
 * @schema ServiceRoleSpecRulesConstraints
 */
export interface ServiceRoleSpecRulesConstraints {
  /**
   * Key of the constraint.
   *
   * @schema ServiceRoleSpecRulesConstraints#key
   */
  readonly key?: string;

  /**
   * List of valid values for the constraint.
   *
   * @schema ServiceRoleSpecRulesConstraints#values
   */
  readonly values?: string[];

}

