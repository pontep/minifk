"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigMap = void 0;
const k8s = require("./imports/k8s");
const base_1 = require("./base");
const fs = require("fs");
const path = require("path");
const minimatch = require("minimatch");
const utils_1 = require("./utils");
/**
 * ConfigMap holds configuration data for pods to consume.
 */
class ConfigMap extends base_1.Resource {
    constructor(scope, id, props = {}) {
        var _a, _b;
        super(scope, id, props);
        this._binaryData = {};
        this._data = {};
        this.apiObject = new k8s.ConfigMap(this, 'ConfigMap', {
            metadata: props.metadata,
            // we need lazy here because we filter empty
            data: utils_1.lazy(() => this.synthesizeData()),
            binaryData: utils_1.lazy(() => this.synthesizeBinaryData()),
        });
        for (const [k, v] of Object.entries((_a = props.data) !== null && _a !== void 0 ? _a : {})) {
            this.addData(k, v);
        }
        for (const [k, v] of Object.entries((_b = props.binaryData) !== null && _b !== void 0 ? _b : {})) {
            this.addBinaryData(k, v);
        }
    }
    /**
     * Represents a ConfigMap created elsewhere.
     * @param name The name of the config map to import
     */
    static fromConfigMapName(name) {
        return { name };
    }
    /**
     * Adds a data entry to the config map.
     * @param key The key
     * @param value The value
     *
     * @throws if there is either a `data` or `binaryData` entry with the same key
     */
    addData(key, value) {
        this.verifyKeyAvailable(key);
        this._data[key] = value;
    }
    /**
     * The data associated with this config map.
     *
     * Returns an copy. To add data records, use `addData()` or `addBinaryData()`.
     */
    get data() {
        return { ...this._data };
    }
    /**
     * Adds a binary data entry to the config map. BinaryData can contain byte
     * sequences that are not in the UTF-8 range.
     * @param key The key
     * @param value The value
     *
     * @throws if there is either a `data` or `binaryData` entry with the same key
     */
    addBinaryData(key, value) {
        this.verifyKeyAvailable(key);
        this._binaryData[key] = value;
    }
    /**
     * The binary data associated with this config map.
     *
     * Returns a copy. To add data records, use `addBinaryData()` or `addData()`.
     */
    get binaryData() {
        return { ...this._binaryData };
    }
    /**
     * Adds a file to the ConfigMap.
     * @param localFile The path to the local file
     * @param key The ConfigMap key (default to the file name).
     */
    addFile(localFile, key) {
        key = key !== null && key !== void 0 ? key : path.basename(localFile);
        const value = fs.readFileSync(localFile, 'utf-8');
        this.addData(key, value);
    }
    /**
     * Adds a directory to the ConfigMap.
     * @param localDir A path to a local directory
     * @param options Options
     */
    addDirectory(localDir, options = {}) {
        var _a, _b;
        const exclude = (_a = options.exclude) !== null && _a !== void 0 ? _a : [];
        const shouldInclude = (file) => {
            for (const pattern of exclude) {
                if (minimatch(file, pattern)) {
                    return false;
                }
            }
            return true;
        };
        const keyPrefix = (_b = options.keyPrefix) !== null && _b !== void 0 ? _b : '';
        for (const file of fs.readdirSync(localDir)) {
            const filePath = path.join(localDir, file);
            if (fs.statSync(filePath).isDirectory()) {
                continue;
            }
            if (!shouldInclude(file)) {
                continue;
            }
            const relativeFilePath = keyPrefix + file;
            this.addFile(filePath, relativeFilePath);
        }
    }
    verifyKeyAvailable(key) {
        if (key in this._data || key in this._binaryData) {
            throw new Error(`unable to add a ConfigMap entry with key "${key}". It is already used`);
        }
    }
    synthesizeData() {
        return utils_1.undefinedIfEmpty(this._data);
    }
    synthesizeBinaryData() {
        return utils_1.undefinedIfEmpty(this._binaryData);
    }
}
exports.ConfigMap = ConfigMap;
//# sourceMappingURL=data:application/json;base64,