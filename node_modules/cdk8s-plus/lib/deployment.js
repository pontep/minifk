"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentSpecDefinition = exports.Deployment = void 0;
const k8s = require("./imports/k8s");
const constructs_1 = require("constructs");
const service_1 = require("./service");
const base_1 = require("./base");
const utils_1 = require("./utils");
const pod_1 = require("./pod");
const cdk8s_1 = require("cdk8s");
/**
*
* A Deployment provides declarative updates for Pods and ReplicaSets.
*
* You describe a desired state in a Deployment, and the Deployment Controller changes the actual
* state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove
* existing Deployments and adopt all their resources with new Deployments.
*
* > Note: Do not manage ReplicaSets owned by a Deployment. Consider opening an issue in the main Kubernetes repository if your use case is not covered below.
*
* Use Case
* ---------
*
* The following are typical use cases for Deployments:
*
* - Create a Deployment to rollout a ReplicaSet. The ReplicaSet creates Pods in the background.
*   Check the status of the rollout to see if it succeeds or not.
* - Declare the new state of the Pods by updating the PodTemplateSpec of the Deployment.
*   A new ReplicaSet is created and the Deployment manages moving the Pods from the old ReplicaSet to the new one at a controlled rate.
*   Each new ReplicaSet updates the revision of the Deployment.
* - Rollback to an earlier Deployment revision if the current state of the Deployment is not stable.
*   Each rollback updates the revision of the Deployment.
* - Scale up the Deployment to facilitate more load.
* - Pause the Deployment to apply multiple fixes to its PodTemplateSpec and then resume it to start a new rollout.
* - Use the status of the Deployment as an indicator that a rollout has stuck.
* - Clean up older ReplicaSets that you don't need anymore.
*
**/
class Deployment extends base_1.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.spec = new DeploymentSpecDefinition(props.spec);
        this.apiObject = new k8s.Deployment(this, 'Pod', {
            metadata: props.metadata,
            spec: utils_1.lazy(() => this.spec._toKube(this)),
        });
    }
    /**
     * Expose a deployment via a service.
     *
     * This is equivalent to running `kubectl expose deployment <deployment-name>`.
     *
     * @param options - Options.
     */
    expose(options) {
        var _a;
        const containers = this.spec.podSpecTemplate.containers;
        if (containers.length === 0) {
            throw new Error('Cannot expose a deployment without containers');
        }
        // create a label and attach it to the deployment pods
        const selector = 'cdk8s.deployment';
        const matcher = constructs_1.Node.of(this).uniqueId;
        const service = new service_1.Service(this, 'Service', {
            spec: {
                type: (_a = options.serviceType) !== null && _a !== void 0 ? _a : service_1.ServiceType.CLUSTER_IP,
            },
        });
        service.spec.addSelector(selector, matcher);
        service.spec.serve(options.port, {
            // just a PoC, we assume the first container is the main one.
            // TODO: figure out what the correct thing to do here.
            targetPort: containers[0].port,
        });
        return service;
    }
}
exports.Deployment = Deployment;
/**
 * DeploymentSpec is the specification of the desired behavior of the Deployment.
 */
class DeploymentSpecDefinition {
    constructor(props = {}) {
        var _a;
        this.replicas = (_a = props.replicas) !== null && _a !== void 0 ? _a : 1;
        this.podSpecTemplate = new pod_1.PodSpecDefinition(props.podSpecTemplate);
        this.podMetadataTemplate = new cdk8s_1.ApiObjectMetadataDefinition(props.podMetadataTemplate);
        this._labelSelector = {};
    }
    /**
     * Configure a label selector to this deployment.
     * Pods that have the label will be selected by deployments configured with this spec.
     *
     * @param key - The label key.
     * @param value - The label value.
     */
    selectByLabel(key, value) {
        this._labelSelector[key] = value;
    }
    /**
     * The labels this deployment will match against in order to select pods.
     *
     * Returns a a copy. Use `selectByLabel()` to add labels.
     */
    get labelSelector() {
        return { ...this._labelSelector };
    }
    /**
     * @internal
     */
    _toKube(deployment) {
        // automatically select pods in this deployment
        const selector = 'cdk8s.deployment';
        const matcher = constructs_1.Node.of(deployment).uniqueId;
        this.podMetadataTemplate.addLabel(selector, matcher);
        this.selectByLabel(selector, matcher);
        return {
            replicas: this.replicas,
            template: {
                metadata: this.podMetadataTemplate.toJson(),
                spec: this.podSpecTemplate._toKube(),
            },
            selector: {
                matchLabels: this._labelSelector,
            },
        };
    }
}
exports.DeploymentSpecDefinition = DeploymentSpecDefinition;
//# sourceMappingURL=data:application/json;base64,