"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntOrString = exports.Quantity = exports.APIServiceList = exports.APIService = exports.Status = exports.CustomResourceDefinitionList = exports.CustomResourceDefinition = exports.CSINodeList = exports.CSINode = exports.CSIDriverList = exports.CSIDriver = exports.VolumeAttachmentList = exports.VolumeAttachment = exports.StorageClassList = exports.StorageClass = exports.PodPresetList = exports.PodPreset = exports.PriorityClassList = exports.PriorityClass = exports.RoleList = exports.RoleBindingList = exports.RoleBinding = exports.Role = exports.ClusterRoleList = exports.ClusterRoleBindingList = exports.ClusterRoleBinding = exports.ClusterRole = exports.PodDisruptionBudgetList = exports.PodDisruptionBudget = exports.Eviction = exports.RuntimeClassList = exports.RuntimeClass = exports.PodSecurityPolicyList = exports.PodSecurityPolicy = exports.NetworkPolicyList = exports.NetworkPolicy = exports.IngressList = exports.Ingress = exports.ServiceList = exports.ServiceAccountList = exports.ServiceAccount = exports.Service = exports.SecretList = exports.Secret = exports.ResourceQuotaList = exports.ResourceQuota = exports.ReplicationControllerList = exports.ReplicationController = exports.PodTemplateList = exports.PodTemplate = exports.PodList = exports.Pod = exports.PersistentVolumeList = exports.PersistentVolumeClaimList = exports.PersistentVolumeClaim = exports.PersistentVolume = exports.NodeList = exports.Node = exports.NamespaceList = exports.Namespace = exports.LimitRangeList = exports.LimitRange = exports.EventList = exports.Event = exports.EndpointsList = exports.Endpoints = exports.ConfigMapList = exports.ConfigMap = exports.ComponentStatusList = exports.ComponentStatus = exports.Binding = exports.LeaseList = exports.Lease = exports.CertificateSigningRequestList = exports.CertificateSigningRequest = exports.CronJobList = exports.CronJob = exports.JobList = exports.Job = exports.HorizontalPodAutoscalerList = exports.HorizontalPodAutoscaler = exports.SubjectAccessReview = exports.SelfSubjectRulesReview = exports.SelfSubjectAccessReview = exports.LocalSubjectAccessReview = exports.TokenReview = exports.AuditSinkList = exports.AuditSink = exports.Scale = exports.StatefulSetList = exports.StatefulSet = exports.ReplicaSetList = exports.ReplicaSet = exports.DeploymentList = exports.Deployment = exports.DaemonSetList = exports.DaemonSet = exports.ControllerRevisionList = exports.ControllerRevision = exports.ValidatingWebhookConfigurationList = exports.ValidatingWebhookConfiguration = exports.MutatingWebhookConfigurationList = exports.MutatingWebhookConfiguration = void 0;
// generated by cdk8s
const cdk8s_1 = require("cdk8s");
/**
 * MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.
 *
 * @schema io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration
 */
class MutatingWebhookConfiguration extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'MutatingWebhookConfiguration',
            apiVersion: 'admissionregistration.k8s.io/v1beta1',
        });
    }
}
exports.MutatingWebhookConfiguration = MutatingWebhookConfiguration;
/**
 * MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
 *
 * @schema io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList
 */
class MutatingWebhookConfigurationList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'MutatingWebhookConfigurationList',
            apiVersion: 'admissionregistration.k8s.io/v1beta1',
        });
    }
}
exports.MutatingWebhookConfigurationList = MutatingWebhookConfigurationList;
/**
 * ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.
 *
 * @schema io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration
 */
class ValidatingWebhookConfiguration extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'ValidatingWebhookConfiguration',
            apiVersion: 'admissionregistration.k8s.io/v1beta1',
        });
    }
}
exports.ValidatingWebhookConfiguration = ValidatingWebhookConfiguration;
/**
 * ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
 *
 * @schema io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList
 */
class ValidatingWebhookConfigurationList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ValidatingWebhookConfigurationList',
            apiVersion: 'admissionregistration.k8s.io/v1beta1',
        });
    }
}
exports.ValidatingWebhookConfigurationList = ValidatingWebhookConfigurationList;
/**
 * ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
 *
 * @schema io.k8s.api.apps.v1.ControllerRevision
 */
class ControllerRevision extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.ControllerRevision" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ControllerRevision',
            apiVersion: 'apps/v1',
        });
    }
}
exports.ControllerRevision = ControllerRevision;
/**
 * ControllerRevisionList is a resource containing a list of ControllerRevision objects.
 *
 * @schema io.k8s.api.apps.v1.ControllerRevisionList
 */
class ControllerRevisionList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.ControllerRevisionList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ControllerRevisionList',
            apiVersion: 'apps/v1',
        });
    }
}
exports.ControllerRevisionList = ControllerRevisionList;
/**
 * DaemonSet represents the configuration of a daemon set.
 *
 * @schema io.k8s.api.apps.v1.DaemonSet
 */
class DaemonSet extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.DaemonSet" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'DaemonSet',
            apiVersion: 'apps/v1',
        });
    }
}
exports.DaemonSet = DaemonSet;
/**
 * DaemonSetList is a collection of daemon sets.
 *
 * @schema io.k8s.api.apps.v1.DaemonSetList
 */
class DaemonSetList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.DaemonSetList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'DaemonSetList',
            apiVersion: 'apps/v1',
        });
    }
}
exports.DaemonSetList = DaemonSetList;
/**
 * Deployment enables declarative updates for Pods and ReplicaSets.
 *
 * @schema io.k8s.api.apps.v1.Deployment
 */
class Deployment extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.Deployment" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Deployment',
            apiVersion: 'apps/v1',
        });
    }
}
exports.Deployment = Deployment;
/**
 * DeploymentList is a list of Deployments.
 *
 * @schema io.k8s.api.apps.v1.DeploymentList
 */
class DeploymentList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.DeploymentList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'DeploymentList',
            apiVersion: 'apps/v1',
        });
    }
}
exports.DeploymentList = DeploymentList;
/**
 * ReplicaSet ensures that a specified number of pod replicas are running at any given time.
 *
 * @schema io.k8s.api.apps.v1.ReplicaSet
 */
class ReplicaSet extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.ReplicaSet" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'ReplicaSet',
            apiVersion: 'apps/v1',
        });
    }
}
exports.ReplicaSet = ReplicaSet;
/**
 * ReplicaSetList is a collection of ReplicaSets.
 *
 * @schema io.k8s.api.apps.v1.ReplicaSetList
 */
class ReplicaSetList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.ReplicaSetList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ReplicaSetList',
            apiVersion: 'apps/v1',
        });
    }
}
exports.ReplicaSetList = ReplicaSetList;
/**
 * StatefulSet represents a set of pods with consistent identities. Identities are defined as:
 - Network: A single stable DNS and hostname.
 - Storage: As many VolumeClaims as requested.
The StatefulSet guarantees that a given network identity will always map to the same storage identity.
 *
 * @schema io.k8s.api.apps.v1.StatefulSet
 */
class StatefulSet extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.StatefulSet" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'StatefulSet',
            apiVersion: 'apps/v1',
        });
    }
}
exports.StatefulSet = StatefulSet;
/**
 * StatefulSetList is a collection of StatefulSets.
 *
 * @schema io.k8s.api.apps.v1.StatefulSetList
 */
class StatefulSetList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.apps.v1.StatefulSetList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'StatefulSetList',
            apiVersion: 'apps/v1',
        });
    }
}
exports.StatefulSetList = StatefulSetList;
/**
 * Scale represents a scaling request for a resource.
 *
 * @schema io.k8s.api.autoscaling.v1.Scale
 */
class Scale extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.autoscaling.v1.Scale" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Scale',
            apiVersion: 'autoscaling/v1',
        });
    }
}
exports.Scale = Scale;
/**
 * AuditSink represents a cluster level audit sink
 *
 * @schema io.k8s.api.auditregistration.v1alpha1.AuditSink
 */
class AuditSink extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.auditregistration.v1alpha1.AuditSink" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'AuditSink',
            apiVersion: 'auditregistration.k8s.io/v1alpha1',
        });
    }
}
exports.AuditSink = AuditSink;
/**
 * AuditSinkList is a list of AuditSink items.
 *
 * @schema io.k8s.api.auditregistration.v1alpha1.AuditSinkList
 */
class AuditSinkList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.auditregistration.v1alpha1.AuditSinkList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'AuditSinkList',
            apiVersion: 'auditregistration.k8s.io/v1alpha1',
        });
    }
}
exports.AuditSinkList = AuditSinkList;
/**
 * TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
 *
 * @schema io.k8s.api.authentication.v1.TokenReview
 */
class TokenReview extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.authentication.v1.TokenReview" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'TokenReview',
            apiVersion: 'authentication.k8s.io/v1',
        });
    }
}
exports.TokenReview = TokenReview;
/**
 * LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
 *
 * @schema io.k8s.api.authorization.v1.LocalSubjectAccessReview
 */
class LocalSubjectAccessReview extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.authorization.v1.LocalSubjectAccessReview" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'LocalSubjectAccessReview',
            apiVersion: 'authorization.k8s.io/v1',
        });
    }
}
exports.LocalSubjectAccessReview = LocalSubjectAccessReview;
/**
 * SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
 *
 * @schema io.k8s.api.authorization.v1.SelfSubjectAccessReview
 */
class SelfSubjectAccessReview extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.authorization.v1.SelfSubjectAccessReview" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'SelfSubjectAccessReview',
            apiVersion: 'authorization.k8s.io/v1',
        });
    }
}
exports.SelfSubjectAccessReview = SelfSubjectAccessReview;
/**
 * SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
 *
 * @schema io.k8s.api.authorization.v1.SelfSubjectRulesReview
 */
class SelfSubjectRulesReview extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.authorization.v1.SelfSubjectRulesReview" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'SelfSubjectRulesReview',
            apiVersion: 'authorization.k8s.io/v1',
        });
    }
}
exports.SelfSubjectRulesReview = SelfSubjectRulesReview;
/**
 * SubjectAccessReview checks whether or not a user or group can perform an action.
 *
 * @schema io.k8s.api.authorization.v1.SubjectAccessReview
 */
class SubjectAccessReview extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.authorization.v1.SubjectAccessReview" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'SubjectAccessReview',
            apiVersion: 'authorization.k8s.io/v1',
        });
    }
}
exports.SubjectAccessReview = SubjectAccessReview;
/**
 * configuration of a horizontal pod autoscaler.
 *
 * @schema io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler
 */
class HorizontalPodAutoscaler extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'HorizontalPodAutoscaler',
            apiVersion: 'autoscaling/v1',
        });
    }
}
exports.HorizontalPodAutoscaler = HorizontalPodAutoscaler;
/**
 * list of horizontal pod autoscaler objects.
 *
 * @schema io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList
 */
class HorizontalPodAutoscalerList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'HorizontalPodAutoscalerList',
            apiVersion: 'autoscaling/v1',
        });
    }
}
exports.HorizontalPodAutoscalerList = HorizontalPodAutoscalerList;
/**
 * Job represents the configuration of a single job.
 *
 * @schema io.k8s.api.batch.v1.Job
 */
class Job extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.batch.v1.Job" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Job',
            apiVersion: 'batch/v1',
        });
    }
}
exports.Job = Job;
/**
 * JobList is a collection of jobs.
 *
 * @schema io.k8s.api.batch.v1.JobList
 */
class JobList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.batch.v1.JobList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'JobList',
            apiVersion: 'batch/v1',
        });
    }
}
exports.JobList = JobList;
/**
 * CronJob represents the configuration of a single cron job.
 *
 * @schema io.k8s.api.batch.v1beta1.CronJob
 */
class CronJob extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.batch.v1beta1.CronJob" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'CronJob',
            apiVersion: 'batch/v1beta1',
        });
    }
}
exports.CronJob = CronJob;
/**
 * CronJobList is a collection of cron jobs.
 *
 * @schema io.k8s.api.batch.v1beta1.CronJobList
 */
class CronJobList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.batch.v1beta1.CronJobList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'CronJobList',
            apiVersion: 'batch/v1beta1',
        });
    }
}
exports.CronJobList = CronJobList;
/**
 * Describes a certificate signing request
 *
 * @schema io.k8s.api.certificates.v1beta1.CertificateSigningRequest
 */
class CertificateSigningRequest extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.certificates.v1beta1.CertificateSigningRequest" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'CertificateSigningRequest',
            apiVersion: 'certificates.k8s.io/v1beta1',
        });
    }
}
exports.CertificateSigningRequest = CertificateSigningRequest;
/**
 *
 *
 * @schema io.k8s.api.certificates.v1beta1.CertificateSigningRequestList
 */
class CertificateSigningRequestList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.certificates.v1beta1.CertificateSigningRequestList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'CertificateSigningRequestList',
            apiVersion: 'certificates.k8s.io/v1beta1',
        });
    }
}
exports.CertificateSigningRequestList = CertificateSigningRequestList;
/**
 * Lease defines a lease concept.
 *
 * @schema io.k8s.api.coordination.v1.Lease
 */
class Lease extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.coordination.v1.Lease" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Lease',
            apiVersion: 'coordination.k8s.io/v1',
        });
    }
}
exports.Lease = Lease;
/**
 * LeaseList is a list of Lease objects.
 *
 * @schema io.k8s.api.coordination.v1.LeaseList
 */
class LeaseList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.coordination.v1.LeaseList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'LeaseList',
            apiVersion: 'coordination.k8s.io/v1',
        });
    }
}
exports.LeaseList = LeaseList;
/**
 * Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
 *
 * @schema io.k8s.api.core.v1.Binding
 */
class Binding extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.Binding" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'Binding',
            apiVersion: 'v1',
        });
    }
}
exports.Binding = Binding;
/**
 * ComponentStatus (and ComponentStatusList) holds the cluster validation info.
 *
 * @schema io.k8s.api.core.v1.ComponentStatus
 */
class ComponentStatus extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ComponentStatus" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'ComponentStatus',
            apiVersion: 'v1',
        });
    }
}
exports.ComponentStatus = ComponentStatus;
/**
 * Status of all the conditions for the component as a list of ComponentStatus objects.
 *
 * @schema io.k8s.api.core.v1.ComponentStatusList
 */
class ComponentStatusList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ComponentStatusList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ComponentStatusList',
            apiVersion: 'v1',
        });
    }
}
exports.ComponentStatusList = ComponentStatusList;
/**
 * ConfigMap holds configuration data for pods to consume.
 *
 * @schema io.k8s.api.core.v1.ConfigMap
 */
class ConfigMap extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ConfigMap" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'ConfigMap',
            apiVersion: 'v1',
        });
    }
}
exports.ConfigMap = ConfigMap;
/**
 * ConfigMapList is a resource containing a list of ConfigMap objects.
 *
 * @schema io.k8s.api.core.v1.ConfigMapList
 */
class ConfigMapList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ConfigMapList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ConfigMapList',
            apiVersion: 'v1',
        });
    }
}
exports.ConfigMapList = ConfigMapList;
/**
 * Endpoints is a collection of endpoints that implement the actual service. Example:
  Name: "mysvc",
  Subsets: [
    {
      Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
      Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
    },
    {
      Addresses: [{"ip": "10.10.3.3"}],
      Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
    },
 ]
 *
 * @schema io.k8s.api.core.v1.Endpoints
 */
class Endpoints extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.Endpoints" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Endpoints',
            apiVersion: 'v1',
        });
    }
}
exports.Endpoints = Endpoints;
/**
 * EndpointsList is a list of endpoints.
 *
 * @schema io.k8s.api.core.v1.EndpointsList
 */
class EndpointsList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.EndpointsList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'EndpointsList',
            apiVersion: 'v1',
        });
    }
}
exports.EndpointsList = EndpointsList;
/**
 * Event is a report of an event somewhere in the cluster.
 *
 * @schema io.k8s.api.core.v1.Event
 */
class Event extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.Event" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'Event',
            apiVersion: 'v1',
        });
    }
}
exports.Event = Event;
/**
 * EventList is a list of events.
 *
 * @schema io.k8s.api.core.v1.EventList
 */
class EventList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.EventList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'EventList',
            apiVersion: 'v1',
        });
    }
}
exports.EventList = EventList;
/**
 * LimitRange sets resource usage limits for each kind of resource in a Namespace.
 *
 * @schema io.k8s.api.core.v1.LimitRange
 */
class LimitRange extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.LimitRange" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'LimitRange',
            apiVersion: 'v1',
        });
    }
}
exports.LimitRange = LimitRange;
/**
 * LimitRangeList is a list of LimitRange items.
 *
 * @schema io.k8s.api.core.v1.LimitRangeList
 */
class LimitRangeList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.LimitRangeList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'LimitRangeList',
            apiVersion: 'v1',
        });
    }
}
exports.LimitRangeList = LimitRangeList;
/**
 * Namespace provides a scope for Names. Use of multiple namespaces is optional.
 *
 * @schema io.k8s.api.core.v1.Namespace
 */
class Namespace extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.Namespace" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Namespace',
            apiVersion: 'v1',
        });
    }
}
exports.Namespace = Namespace;
/**
 * NamespaceList is a list of Namespaces.
 *
 * @schema io.k8s.api.core.v1.NamespaceList
 */
class NamespaceList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.NamespaceList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'NamespaceList',
            apiVersion: 'v1',
        });
    }
}
exports.NamespaceList = NamespaceList;
/**
 * Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
 *
 * @schema io.k8s.api.core.v1.Node
 */
class Node extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.Node" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Node',
            apiVersion: 'v1',
        });
    }
}
exports.Node = Node;
/**
 * NodeList is the whole list of all Nodes which have been registered with master.
 *
 * @schema io.k8s.api.core.v1.NodeList
 */
class NodeList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.NodeList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'NodeList',
            apiVersion: 'v1',
        });
    }
}
exports.NodeList = NodeList;
/**
 * PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
 *
 * @schema io.k8s.api.core.v1.PersistentVolume
 */
class PersistentVolume extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.PersistentVolume" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'PersistentVolume',
            apiVersion: 'v1',
        });
    }
}
exports.PersistentVolume = PersistentVolume;
/**
 * PersistentVolumeClaim is a user's request for and claim to a persistent volume
 *
 * @schema io.k8s.api.core.v1.PersistentVolumeClaim
 */
class PersistentVolumeClaim extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.PersistentVolumeClaim" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'PersistentVolumeClaim',
            apiVersion: 'v1',
        });
    }
}
exports.PersistentVolumeClaim = PersistentVolumeClaim;
/**
 * PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
 *
 * @schema io.k8s.api.core.v1.PersistentVolumeClaimList
 */
class PersistentVolumeClaimList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.PersistentVolumeClaimList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'PersistentVolumeClaimList',
            apiVersion: 'v1',
        });
    }
}
exports.PersistentVolumeClaimList = PersistentVolumeClaimList;
/**
 * PersistentVolumeList is a list of PersistentVolume items.
 *
 * @schema io.k8s.api.core.v1.PersistentVolumeList
 */
class PersistentVolumeList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.PersistentVolumeList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'PersistentVolumeList',
            apiVersion: 'v1',
        });
    }
}
exports.PersistentVolumeList = PersistentVolumeList;
/**
 * Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
 *
 * @schema io.k8s.api.core.v1.Pod
 */
class Pod extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.Pod" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Pod',
            apiVersion: 'v1',
        });
    }
}
exports.Pod = Pod;
/**
 * PodList is a list of Pods.
 *
 * @schema io.k8s.api.core.v1.PodList
 */
class PodList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.PodList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'PodList',
            apiVersion: 'v1',
        });
    }
}
exports.PodList = PodList;
/**
 * PodTemplate describes a template for creating copies of a predefined pod.
 *
 * @schema io.k8s.api.core.v1.PodTemplate
 */
class PodTemplate extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.PodTemplate" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'PodTemplate',
            apiVersion: 'v1',
        });
    }
}
exports.PodTemplate = PodTemplate;
/**
 * PodTemplateList is a list of PodTemplates.
 *
 * @schema io.k8s.api.core.v1.PodTemplateList
 */
class PodTemplateList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.PodTemplateList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'PodTemplateList',
            apiVersion: 'v1',
        });
    }
}
exports.PodTemplateList = PodTemplateList;
/**
 * ReplicationController represents the configuration of a replication controller.
 *
 * @schema io.k8s.api.core.v1.ReplicationController
 */
class ReplicationController extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ReplicationController" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'ReplicationController',
            apiVersion: 'v1',
        });
    }
}
exports.ReplicationController = ReplicationController;
/**
 * ReplicationControllerList is a collection of replication controllers.
 *
 * @schema io.k8s.api.core.v1.ReplicationControllerList
 */
class ReplicationControllerList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ReplicationControllerList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ReplicationControllerList',
            apiVersion: 'v1',
        });
    }
}
exports.ReplicationControllerList = ReplicationControllerList;
/**
 * ResourceQuota sets aggregate quota restrictions enforced per namespace
 *
 * @schema io.k8s.api.core.v1.ResourceQuota
 */
class ResourceQuota extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ResourceQuota" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'ResourceQuota',
            apiVersion: 'v1',
        });
    }
}
exports.ResourceQuota = ResourceQuota;
/**
 * ResourceQuotaList is a list of ResourceQuota items.
 *
 * @schema io.k8s.api.core.v1.ResourceQuotaList
 */
class ResourceQuotaList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ResourceQuotaList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ResourceQuotaList',
            apiVersion: 'v1',
        });
    }
}
exports.ResourceQuotaList = ResourceQuotaList;
/**
 * Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
 *
 * @schema io.k8s.api.core.v1.Secret
 */
class Secret extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.Secret" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Secret',
            apiVersion: 'v1',
        });
    }
}
exports.Secret = Secret;
/**
 * SecretList is a list of Secret.
 *
 * @schema io.k8s.api.core.v1.SecretList
 */
class SecretList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.SecretList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'SecretList',
            apiVersion: 'v1',
        });
    }
}
exports.SecretList = SecretList;
/**
 * Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
 *
 * @schema io.k8s.api.core.v1.Service
 */
class Service extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.Service" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Service',
            apiVersion: 'v1',
        });
    }
}
exports.Service = Service;
/**
 * ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
 *
 * @schema io.k8s.api.core.v1.ServiceAccount
 */
class ServiceAccount extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ServiceAccount" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'ServiceAccount',
            apiVersion: 'v1',
        });
    }
}
exports.ServiceAccount = ServiceAccount;
/**
 * ServiceAccountList is a list of ServiceAccount objects
 *
 * @schema io.k8s.api.core.v1.ServiceAccountList
 */
class ServiceAccountList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ServiceAccountList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ServiceAccountList',
            apiVersion: 'v1',
        });
    }
}
exports.ServiceAccountList = ServiceAccountList;
/**
 * ServiceList holds a list of services.
 *
 * @schema io.k8s.api.core.v1.ServiceList
 */
class ServiceList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.core.v1.ServiceList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ServiceList',
            apiVersion: 'v1',
        });
    }
}
exports.ServiceList = ServiceList;
/**
 * Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
 *
 * @schema io.k8s.api.networking.v1beta1.Ingress
 */
class Ingress extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.networking.v1beta1.Ingress" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Ingress',
            apiVersion: 'networking.k8s.io/v1beta1',
        });
    }
}
exports.Ingress = Ingress;
/**
 * IngressList is a collection of Ingress.
 *
 * @schema io.k8s.api.networking.v1beta1.IngressList
 */
class IngressList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.networking.v1beta1.IngressList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'IngressList',
            apiVersion: 'networking.k8s.io/v1beta1',
        });
    }
}
exports.IngressList = IngressList;
/**
 * NetworkPolicy describes what network traffic is allowed for a set of Pods
 *
 * @schema io.k8s.api.networking.v1.NetworkPolicy
 */
class NetworkPolicy extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.networking.v1.NetworkPolicy" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'NetworkPolicy',
            apiVersion: 'networking.k8s.io/v1',
        });
    }
}
exports.NetworkPolicy = NetworkPolicy;
/**
 * NetworkPolicyList is a list of NetworkPolicy objects.
 *
 * @schema io.k8s.api.networking.v1.NetworkPolicyList
 */
class NetworkPolicyList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.networking.v1.NetworkPolicyList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'NetworkPolicyList',
            apiVersion: 'networking.k8s.io/v1',
        });
    }
}
exports.NetworkPolicyList = NetworkPolicyList;
/**
 * PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
 *
 * @schema io.k8s.api.policy.v1beta1.PodSecurityPolicy
 */
class PodSecurityPolicy extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.policy.v1beta1.PodSecurityPolicy" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'PodSecurityPolicy',
            apiVersion: 'policy/v1beta1',
        });
    }
}
exports.PodSecurityPolicy = PodSecurityPolicy;
/**
 * PodSecurityPolicyList is a list of PodSecurityPolicy objects.
 *
 * @schema io.k8s.api.policy.v1beta1.PodSecurityPolicyList
 */
class PodSecurityPolicyList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.policy.v1beta1.PodSecurityPolicyList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'PodSecurityPolicyList',
            apiVersion: 'policy/v1beta1',
        });
    }
}
exports.PodSecurityPolicyList = PodSecurityPolicyList;
/**
 * RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
 *
 * @schema io.k8s.api.node.v1beta1.RuntimeClass
 */
class RuntimeClass extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.node.v1beta1.RuntimeClass" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'RuntimeClass',
            apiVersion: 'node.k8s.io/v1beta1',
        });
    }
}
exports.RuntimeClass = RuntimeClass;
/**
 * RuntimeClassList is a list of RuntimeClass objects.
 *
 * @schema io.k8s.api.node.v1beta1.RuntimeClassList
 */
class RuntimeClassList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.node.v1beta1.RuntimeClassList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'RuntimeClassList',
            apiVersion: 'node.k8s.io/v1beta1',
        });
    }
}
exports.RuntimeClassList = RuntimeClassList;
/**
 * Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
 *
 * @schema io.k8s.api.policy.v1beta1.Eviction
 */
class Eviction extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.policy.v1beta1.Eviction" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Eviction',
            apiVersion: 'policy/v1beta1',
        });
    }
}
exports.Eviction = Eviction;
/**
 * PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
 *
 * @schema io.k8s.api.policy.v1beta1.PodDisruptionBudget
 */
class PodDisruptionBudget extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.policy.v1beta1.PodDisruptionBudget" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'PodDisruptionBudget',
            apiVersion: 'policy/v1beta1',
        });
    }
}
exports.PodDisruptionBudget = PodDisruptionBudget;
/**
 * PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
 *
 * @schema io.k8s.api.policy.v1beta1.PodDisruptionBudgetList
 */
class PodDisruptionBudgetList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.policy.v1beta1.PodDisruptionBudgetList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'PodDisruptionBudgetList',
            apiVersion: 'policy/v1beta1',
        });
    }
}
exports.PodDisruptionBudgetList = PodDisruptionBudgetList;
/**
 * ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
 *
 * @schema io.k8s.api.rbac.v1.ClusterRole
 */
class ClusterRole extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.rbac.v1.ClusterRole" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'ClusterRole',
            apiVersion: 'rbac.authorization.k8s.io/v1',
        });
    }
}
exports.ClusterRole = ClusterRole;
/**
 * ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
 *
 * @schema io.k8s.api.rbac.v1.ClusterRoleBinding
 */
class ClusterRoleBinding extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.rbac.v1.ClusterRoleBinding" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ClusterRoleBinding',
            apiVersion: 'rbac.authorization.k8s.io/v1',
        });
    }
}
exports.ClusterRoleBinding = ClusterRoleBinding;
/**
 * ClusterRoleBindingList is a collection of ClusterRoleBindings
 *
 * @schema io.k8s.api.rbac.v1.ClusterRoleBindingList
 */
class ClusterRoleBindingList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.rbac.v1.ClusterRoleBindingList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ClusterRoleBindingList',
            apiVersion: 'rbac.authorization.k8s.io/v1',
        });
    }
}
exports.ClusterRoleBindingList = ClusterRoleBindingList;
/**
 * ClusterRoleList is a collection of ClusterRoles
 *
 * @schema io.k8s.api.rbac.v1.ClusterRoleList
 */
class ClusterRoleList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.rbac.v1.ClusterRoleList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'ClusterRoleList',
            apiVersion: 'rbac.authorization.k8s.io/v1',
        });
    }
}
exports.ClusterRoleList = ClusterRoleList;
/**
 * Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
 *
 * @schema io.k8s.api.rbac.v1.Role
 */
class Role extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.rbac.v1.Role" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Role',
            apiVersion: 'rbac.authorization.k8s.io/v1',
        });
    }
}
exports.Role = Role;
/**
 * RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
 *
 * @schema io.k8s.api.rbac.v1.RoleBinding
 */
class RoleBinding extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.rbac.v1.RoleBinding" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'RoleBinding',
            apiVersion: 'rbac.authorization.k8s.io/v1',
        });
    }
}
exports.RoleBinding = RoleBinding;
/**
 * RoleBindingList is a collection of RoleBindings
 *
 * @schema io.k8s.api.rbac.v1.RoleBindingList
 */
class RoleBindingList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.rbac.v1.RoleBindingList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'RoleBindingList',
            apiVersion: 'rbac.authorization.k8s.io/v1',
        });
    }
}
exports.RoleBindingList = RoleBindingList;
/**
 * RoleList is a collection of Roles
 *
 * @schema io.k8s.api.rbac.v1.RoleList
 */
class RoleList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.rbac.v1.RoleList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'RoleList',
            apiVersion: 'rbac.authorization.k8s.io/v1',
        });
    }
}
exports.RoleList = RoleList;
/**
 * PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
 *
 * @schema io.k8s.api.scheduling.v1.PriorityClass
 */
class PriorityClass extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.scheduling.v1.PriorityClass" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'PriorityClass',
            apiVersion: 'scheduling.k8s.io/v1',
        });
    }
}
exports.PriorityClass = PriorityClass;
/**
 * PriorityClassList is a collection of priority classes.
 *
 * @schema io.k8s.api.scheduling.v1.PriorityClassList
 */
class PriorityClassList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.scheduling.v1.PriorityClassList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'PriorityClassList',
            apiVersion: 'scheduling.k8s.io/v1',
        });
    }
}
exports.PriorityClassList = PriorityClassList;
/**
 * PodPreset is a policy resource that defines additional runtime requirements for a Pod.
 *
 * @schema io.k8s.api.settings.v1alpha1.PodPreset
 */
class PodPreset extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.settings.v1alpha1.PodPreset" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'PodPreset',
            apiVersion: 'settings.k8s.io/v1alpha1',
        });
    }
}
exports.PodPreset = PodPreset;
/**
 * PodPresetList is a list of PodPreset objects.
 *
 * @schema io.k8s.api.settings.v1alpha1.PodPresetList
 */
class PodPresetList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.settings.v1alpha1.PodPresetList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'PodPresetList',
            apiVersion: 'settings.k8s.io/v1alpha1',
        });
    }
}
exports.PodPresetList = PodPresetList;
/**
 * StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.

StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
 *
 * @schema io.k8s.api.storage.v1.StorageClass
 */
class StorageClass extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.storage.v1.StorageClass" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'StorageClass',
            apiVersion: 'storage.k8s.io/v1',
        });
    }
}
exports.StorageClass = StorageClass;
/**
 * StorageClassList is a collection of storage classes.
 *
 * @schema io.k8s.api.storage.v1.StorageClassList
 */
class StorageClassList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.storage.v1.StorageClassList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'StorageClassList',
            apiVersion: 'storage.k8s.io/v1',
        });
    }
}
exports.StorageClassList = StorageClassList;
/**
 * VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.

VolumeAttachment objects are non-namespaced.
 *
 * @schema io.k8s.api.storage.v1.VolumeAttachment
 */
class VolumeAttachment extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.storage.v1.VolumeAttachment" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'VolumeAttachment',
            apiVersion: 'storage.k8s.io/v1',
        });
    }
}
exports.VolumeAttachment = VolumeAttachment;
/**
 * VolumeAttachmentList is a collection of VolumeAttachment objects.
 *
 * @schema io.k8s.api.storage.v1.VolumeAttachmentList
 */
class VolumeAttachmentList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.storage.v1.VolumeAttachmentList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'VolumeAttachmentList',
            apiVersion: 'storage.k8s.io/v1',
        });
    }
}
exports.VolumeAttachmentList = VolumeAttachmentList;
/**
 * CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
 *
 * @schema io.k8s.api.storage.v1beta1.CSIDriver
 */
class CSIDriver extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.storage.v1beta1.CSIDriver" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'CSIDriver',
            apiVersion: 'storage.k8s.io/v1beta1',
        });
    }
}
exports.CSIDriver = CSIDriver;
/**
 * CSIDriverList is a collection of CSIDriver objects.
 *
 * @schema io.k8s.api.storage.v1beta1.CSIDriverList
 */
class CSIDriverList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.storage.v1beta1.CSIDriverList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'CSIDriverList',
            apiVersion: 'storage.k8s.io/v1beta1',
        });
    }
}
exports.CSIDriverList = CSIDriverList;
/**
 * CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
 *
 * @schema io.k8s.api.storage.v1beta1.CSINode
 */
class CSINode extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.storage.v1beta1.CSINode" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'CSINode',
            apiVersion: 'storage.k8s.io/v1beta1',
        });
    }
}
exports.CSINode = CSINode;
/**
 * CSINodeList is a collection of CSINode objects.
 *
 * @schema io.k8s.api.storage.v1beta1.CSINodeList
 */
class CSINodeList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.api.storage.v1beta1.CSINodeList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'CSINodeList',
            apiVersion: 'storage.k8s.io/v1beta1',
        });
    }
}
exports.CSINodeList = CSINodeList;
/**
 * CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.
 *
 * @schema io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition
 */
class CustomResourceDefinition extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'CustomResourceDefinition',
            apiVersion: 'apiextensions.k8s.io/v1beta1',
        });
    }
}
exports.CustomResourceDefinition = CustomResourceDefinition;
/**
 * CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
 *
 * @schema io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList
 */
class CustomResourceDefinitionList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'CustomResourceDefinitionList',
            apiVersion: 'apiextensions.k8s.io/v1beta1',
        });
    }
}
exports.CustomResourceDefinitionList = CustomResourceDefinitionList;
/**
 * Status is a return value for calls that don't return other objects.
 *
 * @schema io.k8s.apimachinery.pkg.apis.meta.v1.Status
 */
class Status extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.apimachinery.pkg.apis.meta.v1.Status" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'Status',
            apiVersion: 'v1',
        });
    }
}
exports.Status = Status;
/**
 * APIService represents a server for a particular GroupVersion. Name must be "version.group".
 *
 * @schema io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService
 */
class APIService extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options = {}) {
        super(scope, name, {
            ...options,
            kind: 'APIService',
            apiVersion: 'apiregistration.k8s.io/v1',
        });
    }
}
exports.APIService = APIService;
/**
 * APIServiceList is a list of APIService objects.
 *
 * @schema io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList
 */
class APIServiceList extends cdk8s_1.ApiObject {
    /**
     * Defines a "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList" API object
     * @param scope the scope in which to define this object
     * @param name a scope-local name for the object
     * @param options configuration options
     */
    constructor(scope, name, options) {
        super(scope, name, {
            ...options,
            kind: 'APIServiceList',
            apiVersion: 'apiregistration.k8s.io/v1',
        });
    }
}
exports.APIServiceList = APIServiceList;
/**
 * @schema io.k8s.apimachinery.pkg.api.resource.Quantity
 */
class Quantity {
    static fromString(value) {
        return new Quantity(value);
    }
    static fromNumber(value) {
        return new Quantity(value);
    }
    constructor(value) {
        Object.defineProperty(this, 'resolve', { value: () => value });
    }
}
exports.Quantity = Quantity;
/**
 * @schema io.k8s.apimachinery.pkg.util.intstr.IntOrString
 */
class IntOrString {
    static fromString(value) {
        return new IntOrString(value);
    }
    static fromNumber(value) {
        return new IntOrString(value);
    }
    constructor(value) {
        Object.defineProperty(this, 'resolve', { value: () => value });
    }
}
exports.IntOrString = IntOrString;
//# sourceMappingURL=data:application/json;base64,