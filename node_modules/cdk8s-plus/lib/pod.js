"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PodSpecDefinition = exports.RestartPolicy = exports.Pod = void 0;
const k8s = require("./imports/k8s");
const base_1 = require("./base");
const utils_1 = require("./utils");
/**
 * Pod is a collection of containers that can run on a host. This resource is
 * created by clients and scheduled onto hosts.
 */
class Pod extends base_1.Resource {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        this.spec = new PodSpecDefinition(props.spec);
        this.apiObject = new k8s.Pod(this, 'Pod', {
            metadata: props.metadata,
            spec: utils_1.lazy(() => this.spec._toKube()),
        });
    }
}
exports.Pod = Pod;
/**
 * Restart policy for all containers within the pod.
 */
var RestartPolicy;
(function (RestartPolicy) {
    /**
     * Always restart the pod after it exits.
     */
    RestartPolicy["ALWAYS"] = "Always";
    /**
     * Only restart if the pod exits with a non-zero exit code.
     */
    RestartPolicy["ON_FAILURE"] = "OnFailure";
    /**
     * Never restart the pod.
     */
    RestartPolicy["NEVER"] = "Never";
})(RestartPolicy = exports.RestartPolicy || (exports.RestartPolicy = {}));
/**
 * A description of a pod.
 */
class PodSpecDefinition {
    constructor(props = {}) {
        var _a, _b;
        this._containers = (_a = props.containers) !== null && _a !== void 0 ? _a : [];
        this._volumes = (_b = props.volumes) !== null && _b !== void 0 ? _b : [];
        this.restartPolicy = props.restartPolicy;
        this.serviceAccount = props.serviceAccount;
    }
    /**
     * List of containers belonging to the pod.
     *
     * @returns a copy - do not modify
     */
    get containers() {
        return [...this._containers];
    }
    /**
     * Adds a container to this pod.
     *
     * @param container The container to add
     */
    addContainer(container) {
        this._containers.push(container);
    }
    /**
     * Adds a volume to this pod.
     *
     * @param volume The volume to add
     */
    addVolume(volume) {
        this._volumes.push(volume);
    }
    /**
     * List of volumes that can be mounted by containers belonging to the pod.
     *
     * Returns a copy. To add volumes, use `addVolume()`.
     */
    get volumes() {
        return [...this._volumes];
    }
    /**
     * @internal
     */
    _toKube() {
        var _a;
        if (this.containers.length === 0) {
            throw new Error('PodSpec must have at least 1 container');
        }
        const volumes = [];
        const containers = [];
        for (const container of this.containers) {
            // automatically add volume from the container mount
            // to this pod so thats its available to the container.
            for (const mount of container.mounts) {
                volumes.push(mount.volume._toKube());
            }
            containers.push(container._toKube());
        }
        for (const volume of this._volumes) {
            volumes.push(volume._toKube());
        }
        return {
            restartPolicy: this.restartPolicy,
            serviceAccountName: (_a = this.serviceAccount) === null || _a === void 0 ? void 0 : _a.name,
            containers: containers,
            volumes: volumes,
        };
    }
}
exports.PodSpecDefinition = PodSpecDefinition;
//# sourceMappingURL=data:application/json;base64,