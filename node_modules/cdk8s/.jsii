{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bundled": {
    "follow-redirects": "^1.11.0",
    "json-stable-stringify": "^1.0.1",
    "yaml": "^1.7.2"
  },
  "dependencies": {
    "constructs": "2.0.2"
  },
  "dependencyClosure": {
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Cloud Development Kit for Kubernetes",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/awslabs/cdk8s.git",
  "jsiiVersion": "1.7.0 (build 179a3a5)",
  "keywords": [
    "cdk",
    "kubernetes",
    "k8s",
    "constructs"
  ],
  "license": "Apache-2.0",
  "name": "cdk8s",
  "readme": {
    "markdown": "# cdk8s\n\n> Cloud Development Kit for Kubernetes\n\n**cdk8s** is a software development framework for defining Kubernetes\napplications using rich object-oriented APIs. It allows developers to leverage\nthe full power of software in order to define abstract components called\n\"constructs\" which compose Kubernetes resources or other constructs into\nhigher-level abstractions.\n\nThis library is the foundation of **cdk8s**. It includes base types that are\nused to define cdk8s applications.\n\n## Chart\n\nThe `Chart` is a container that synthesizes a single Kubernetes manifest.\n\n```ts\nclass MyChart extends Chart {\n  constructor(scope: Construct, ns: string) {\n    super(scope, ns);\n\n    // add contents here\n  }\n}\n```\n\nDuring synthesis, charts collect all the `ApiObject` nodes (recursively) and\nemit a single YAML manifest that includes all these objects.\n\n## ApiObject\n\nAn `ApiObject` is a construct that represents an entry in a Kubernetes manifest.\nIn most cases, you won't use `ApiObject` directly but rather use classes that\nare generated by the cdk8s CLI and extend this base class.\n\n\n## Include\n\nThe `Include` construct can be used to include an existing manifest in a chart.\n\nThe following example will include the Kubernetes Dashboard in `MyChart`:\n\n```ts\nimport { Include } from 'cdk8s';\n\nclass MyChart extends Chart {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const dashboard = new Include(this, 'dashboard', {\n      url: 'https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml',\n      // or\n      url: 'dashboard.yaml'\n    });\n\n    // ...other resources\n  }\n}\n```\n\nAll API objects defined in the included manifest will be added as children\n`ApiObject`s under the `Include` construct's scope. This implies that you can\nuse `Node.of(include).children` to inspect them.\n\nThe following example queries for all the `Deployment` resources in the\ndashboard:\n\n```ts\nconst deps = Node.of(dashboard)\n  .children\n  .filter((c: ApiObject) => c.kind === 'Deployment');\n```\n\nNOTE: names of included objects (`metadata.name`) are preserved. This means that\nif you try to include the same manifest twice into the same chart, your manifest\nwill have duplicate definitions of the same objects.\n\n### Dependencies\n\nYou can declare dependencies between various `cdk8s` constructs by using the built-in support of the underlying `constructs` model.\n\n#### ApiObjects\n\nFor example, you can force kubernetes to first apply a `Namespace` before applying the `Service` in the scope of that namespace:\n\n```typescript\n\nconst namespace = new k8s.Namespace(chart, 'backend');\nconst service = new k8s.Service(chart, 'Service', { metadata: { namespace: namespace.name }});\n\n// declare the dependency. this is just a syntactic sugar for Node.of(service).addDependency(namespace)\nservice.addDependency(namespace);\n```\n\n`cdk8s` will ensure that the `Namespace` object is placed before the `Service` object in the resulting manifest:\n\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: chart-backend-a59d2e47\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: chart-service-93d02be7\n  namespace: chart-backend-a59d2e47\n```\n\n#### Charts\n\nYou can also specify dependencies between charts, in exactly the same manner. For example, if we have a chart that provisions our `namespace`, we need that chart to be applied first:\n\n```typescript\nconst namespaceChart = new NamespaceChart(app, 'namespace');\nconst applicationChart = new ApplicationChart(app, 'application');\n\n// declare the dependency. this is just a syntactic sugar for Node.of(applicationChart).addDependency(namespaceChart)\napplicationChart.addDependency(namespaceChart);\n```\n\nRunning `cdk8s synth` will produce the following dist directory:\n\n```console\n> cdk8s synth\n\ndist/0000-namespace.k8s.yaml\ndist/0001-application.k8s.yaml\n```\n\nNotice that the `namespace` chart appears first with the `0000` prefix. This will ensure that a subsequent execution of `kubectl apply -f dist/` will apply the `namespace` first, and the `application` second.\n\n#### Custom Constructs\n\nThe behavior above applies in the same way to custom constructs that you create or use.\n\n```typescript\nclass Database extends Construct {\n  constructor(scope: Construct, name: string) {\n    super(scope, name);\n\n    new k8s.StatefulSet(this, 'StatefulSet');\n    new k8s.ConfigMap(this, 'ConfigMap');\n  }\n}\n\nconst app = new App();\n\nconst chart = new Chart(app, 'Chart');\n\nconst service = new k8s.Service(chart, 'Service')\nconst database = new Database(chart, 'Database');\n\nservice.addDependency(database);\n```\n\nDeclaring such a dependency will cause **each** `ApiObject` in the source construct, to *depend on* **every** `ApiObject` in the target construct.\n\nNote that in the example above, the source construct is actually an `ApiObject`, which is also ok since it is essentially a construct with a single `ApiObject`.\n\n> Note that if the source of your dependency is a custom construct, it won't have the `addDependency` syntactic sugar by default, so you'll have to use `Node.of()`.\n\nThe resulting manifest will be:\n\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: chart-database-statefulset-4627f8e2\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chart-database-configmap-676f8640\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: chart-service-93d02be7\n```\n\nYou can see that all `ApiObject`s of the `Database` construct, appear before the `Service` object.\n\n#### Things just got cool\n\nIf you simply declare a dependency between two `ApiObject`s (or `Constructs`), that belong to two different `Chart`s, `cdk8s` will create the chart dependency automatically for you.\n\n```typescript\nconst namespaceChart = new NamespaceChart(app, 'namespace');\nconst applicationChart = new ApplicationChart(app, 'application');\n\nconst namespace = new k8s.Namespace(namespaceChart, 'namespace');\nconst deployment = new k8s.Deployment(applicationChart, 'Deployment');\n\n// dependency between ApiObjects, not Charts!\ndeployment.addDependency(namespace);\n```\n\nRunning `cdk8s synth` will produce the same result as if explicit chart dependencies were declared:\n\n```console\n> cdk8s synth\n\ndist/0000-namespace.k8s.yaml\ndist/0001-application.k8s.yaml\n```\n\nThis means you need not be bothered with managing chart dependencies, simply work with the `ApiObject`s you create, and let `cdk8s` infer the chart dependencies.\n\n### Testing\n\ncdk8s bundles a set of test utilities under the `Testing` class:\n\n* `Testing.app()` returns an `App` object bound to a temporary output directory.\n* `Testing.synth(chart)` returns the Kubernetes manifest synthesized from a\n  chart.\n\n\n## License\n\nThis project is distributed under the [Apache License, Version 2.0](./LICENSE).\n\nThis module is part of the [cdk8s project](https://github.com/awslabs/cdk8s).\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/awslabs/cdk8s.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "namespace": "Org.Cdk8s",
      "packageId": "Org.Cdk8s"
    },
    "java": {
      "maven": {
        "artifactId": "cdk8s",
        "groupId": "org.cdk8s"
      },
      "package": "org.cdk8s"
    },
    "js": {
      "npm": "cdk8s"
    },
    "python": {
      "distName": "cdk8s",
      "module": "cdk8s"
    }
  },
  "types": {
    "cdk8s.ApiObject": {
      "assembly": "cdk8s",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdk8s.ApiObject",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Defines an API object."
        },
        "parameters": [
          {
            "docs": {
              "summary": "the construct scope."
            },
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "docs": {
              "summary": "namespace."
            },
            "name": "ns",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "options."
            },
            "name": "options",
            "type": {
              "fqn": "cdk8s.ApiObjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/api-object.ts",
        "line": 36
      },
      "methods": [
        {
          "docs": {
            "remarks": "These can be other ApiObjects, Charts, or custom.",
            "stability": "experimental",
            "summary": "Create a dependency between this ApiObject and other constructs."
          },
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 97
          },
          "name": "addDependency",
          "parameters": [
            {
              "docs": {
                "summary": "the dependencies to add."
              },
              "name": "dependencies",
              "type": {
                "fqn": "constructs.IConstruct"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the object to Kubernetes JSON."
          },
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 104
          },
          "name": "toJson",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ApiObject",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The object's API version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 50
          },
          "name": "apiVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The chart in which this object is defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 60
          },
          "name": "chart",
          "type": {
            "fqn": "cdk8s.Chart"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The object kind."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 55
          },
          "name": "kind",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Metadata associated with this API object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 65
          },
          "name": "metadata",
          "type": {
            "fqn": "cdk8s.ApiObjectMetadataDefinition"
          }
        },
        {
          "docs": {
            "remarks": "If a name is specified in `metadata.name` this will be the name returned.\nOtherwise, a name will be generated by calling\n`Chart.of(this).generatedObjectName(this)`, which by default uses the\nconstruct path to generate a DNS-compatible name for the resource.",
            "stability": "experimental",
            "summary": "The name of the API object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 45
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdk8s.ApiObjectMetadata": {
      "assembly": "cdk8s",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Metadata associated with this object."
      },
      "fqn": "cdk8s.ApiObjectMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/metadata.ts",
        "line": 6
      },
      "name": "ApiObjectMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No annotations.",
            "remarks": "They are not queryable and should be\npreserved when modifying objects.",
            "see": "http://kubernetes.io/docs/user-guide/annotations",
            "stability": "experimental",
            "summary": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 35
          },
          "name": "annotations",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No labels.",
            "remarks": "May match selectors of replication controllers and services.",
            "see": "http://kubernetes.io/docs/user-guide/labels",
            "stability": "experimental",
            "summary": "Map of string keys and values that can be used to organize and categorize (scope and select) objects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 44
          },
          "name": "labels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- an app-unique name generated by the chart",
            "remarks": "Normally, you shouldn't specify names for objects and let the CDK generate\na name for you that is application-unique. The names CDK generates are\ncomposed from the construct path components, separated by dots and a suffix\nthat is based on a hash of the entire path, to ensure uniqueness.\n\nYou can supply custom name allocation logic by overriding the\n`chart.generateObjectName` method.\n\nIf you use an explicit name here, bear in mind that this reduces the\ncomposability of your construct because it won't be possible to include\nmore than one instance in any app. Therefore it is highly recommended to\nleave this unspecified.",
            "stability": "experimental",
            "summary": "The unique, namespace-global, name of this object inside the Kubernetes cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 26
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined (will be assigned to the 'default' namespace)",
            "remarks": "An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
            "stability": "experimental",
            "summary": "Namespace defines the space within each name must be unique."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 52
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdk8s.ApiObjectMetadataDefinition": {
      "assembly": "cdk8s",
      "docs": {
        "stability": "experimental",
        "summary": "Object metadata."
      },
      "fqn": "cdk8s.ApiObjectMetadataDefinition",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "cdk8s.ApiObjectMetadata"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/metadata.ts",
        "line": 63
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an arbitrary key/value to the object metadata."
          },
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 135
          },
          "name": "add",
          "parameters": [
            {
              "docs": {
                "summary": "Metadata key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Metadata value."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an annotation."
          },
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 126
          },
          "name": "addAnnotation",
          "parameters": [
            {
              "docs": {
                "summary": "- The key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- The value."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a label."
          },
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 108
          },
          "name": "addLabel",
          "parameters": [
            {
              "docs": {
                "summary": "- The key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "- The value."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "returns": "a value of a label or undefined",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 116
          },
          "name": "getLabel",
          "parameters": [
            {
              "docs": {
                "summary": "the label."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes a k8s ObjectMeta for this metadata set."
          },
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 142
          },
          "name": "toJson",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ApiObjectMetadataDefinition",
      "properties": [
        {
          "docs": {
            "remarks": "If a name is specified in `metadata.name` this will be the name returned.\nOtherwise, a name will be generated by calling\n`Chart.of(this).generatedObjectName(this)`, which by default uses the\nconstruct path to generate a DNS-compatible name for the resource.",
            "stability": "experimental",
            "summary": "The name of the API object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 72
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The object's namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/metadata.ts",
            "line": 77
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdk8s.ApiObjectOptions": {
      "assembly": "cdk8s",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for defining API objects."
      },
      "fqn": "cdk8s.ApiObjectOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/api-object.ts",
        "line": 11
      },
      "name": "ApiObjectOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "API version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 23
          },
          "name": "apiVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resource kind."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 28
          },
          "name": "kind",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If `name` is not specified, an app-unique name will be allocated by the\nframework based on the path of the construct within thes construct tree.",
            "stability": "experimental",
            "summary": "Object metadata."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/api-object.ts",
            "line": 18
          },
          "name": "metadata",
          "optional": true,
          "type": {
            "fqn": "cdk8s.ApiObjectMetadata"
          }
        }
      ]
    },
    "cdk8s.App": {
      "assembly": "cdk8s",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a cdk8s application."
      },
      "fqn": "cdk8s.App",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Defines an app."
        },
        "parameters": [
          {
            "docs": {
              "summary": "configuration options."
            },
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "cdk8s.AppOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/app.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes all manifests to the output directory."
          },
          "locationInModule": {
            "filename": "src/app.ts",
            "line": 39
          },
          "name": "synth"
        }
      ],
      "name": "App",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The output directory into which manifests will be synthesized."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/app.ts",
            "line": 25
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdk8s.AppOptions": {
      "assembly": "cdk8s",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdk8s.AppOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/app.ts",
        "line": 9
      },
      "name": "AppOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- CDK8S_OUTDIR if defined, otherwise \"dist\"",
            "stability": "experimental",
            "summary": "The directory to output Kubernetes manifests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/app.ts",
            "line": 15
          },
          "name": "outdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdk8s.Chart": {
      "assembly": "cdk8s",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdk8s.Chart",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "ns",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "cdk8s.ChartOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/chart.ts",
        "line": 17
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Finds the chart in which a node is defined."
          },
          "locationInModule": {
            "filename": "src/chart.ts",
            "line": 23
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "a construct node."
              },
              "name": "c",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdk8s.Chart"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "These can be other ApiObjects, Charts, or custom.",
            "stability": "experimental",
            "summary": "Create a dependency between this Chart and other constructs."
          },
          "locationInModule": {
            "filename": "src/chart.ts",
            "line": 76
          },
          "name": "addDependency",
          "parameters": [
            {
              "docs": {
                "summary": "the dependencies to add."
              },
              "name": "dependencies",
              "type": {
                "fqn": "constructs.IConstruct"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Different resource types may have different constraints on names\n(`metadata.name`). The previous version of the name generator was\ncompatible with DNS_SUBDOMAIN but not with DNS_LABEL.\n\nFor example, `Deployment` names must comply with DNS_SUBDOMAIN while\n`Service` names must comply with DNS_LABEL.\n\nSince there is no formal specification for this, the default name\ngeneration scheme for kubernetes objects in cdk8s was changed to DNS_LABEL,\nsince it’s the common denominator for all kubernetes resources\n(supposedly).\n\nYou can override this method if you wish to customize object names at the\nchart level.",
            "stability": "experimental",
            "summary": "Generates a app-unique name for an object given it's construct node path."
          },
          "locationInModule": {
            "filename": "src/chart.ts",
            "line": 66
          },
          "name": "generateObjectName",
          "parameters": [
            {
              "docs": {
                "summary": "The API object to generate a name for."
              },
              "name": "apiObject",
              "type": {
                "fqn": "cdk8s.ApiObject"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "array of resource manifests",
            "stability": "experimental",
            "summary": "Renders this chart to a set of Kubernetes JSON resources."
          },
          "locationInModule": {
            "filename": "src/chart.ts",
            "line": 84
          },
          "name": "toJson",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Chart",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The default namespace for all objects in this chart."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/chart.ts",
            "line": 39
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdk8s.ChartOptions": {
      "assembly": "cdk8s",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdk8s.ChartOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/chart.ts",
        "line": 6
      },
      "name": "ChartOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no namespace is synthesized (usually this implies \"default\")",
            "remarks": "This namespace will only apply to objects that don't have a\n`namespace` explicitly defined for them.",
            "stability": "experimental",
            "summary": "The default namespace for all objects defined in this chart (directly or indirectly)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/chart.ts",
            "line": 14
          },
          "name": "namespace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdk8s.Include": {
      "assembly": "cdk8s",
      "base": "constructs.Construct",
      "docs": {
        "remarks": "The names (`metadata.name`) of imported resources will be preserved as-is\nfrom the manifest.",
        "stability": "experimental",
        "summary": "Reads a YAML manifest from a file or a URL and defines all resources as API objects within the defined scope."
      },
      "fqn": "cdk8s.Include",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "cdk8s.IncludeOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/include.ts",
        "line": 21
      },
      "name": "Include"
    },
    "cdk8s.IncludeOptions": {
      "assembly": "cdk8s",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdk8s.IncludeOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/include.ts",
        "line": 5
      },
      "name": "IncludeOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "example": "mymanifest.yaml",
            "stability": "experimental",
            "summary": "Local file path or URL which includes a Kubernetes YAML manifest."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/include.ts",
            "line": 11
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "cdk8s.Testing": {
      "assembly": "cdk8s",
      "docs": {
        "stability": "experimental",
        "summary": "Testing utilities for cdk8s applications."
      },
      "fqn": "cdk8s.Testing",
      "kind": "class",
      "locationInModule": {
        "filename": "src/testing.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns an app for testing with the following properties: - Output directory is a temp dir."
          },
          "locationInModule": {
            "filename": "src/testing.ts",
            "line": 15
          },
          "name": "app",
          "returns": {
            "type": {
              "fqn": "cdk8s.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "returns": "a Chart that can be used for tests",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/testing.ts",
            "line": 23
          },
          "name": "chart",
          "returns": {
            "type": {
              "fqn": "cdk8s.Chart"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the Kubernetes manifest synthesized from this chart."
          },
          "locationInModule": {
            "filename": "src/testing.ts",
            "line": 30
          },
          "name": "synth",
          "parameters": [
            {
              "name": "chart",
              "type": {
                "fqn": "cdk8s.Chart"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        }
      ],
      "name": "Testing"
    },
    "cdk8s.Yaml": {
      "assembly": "cdk8s",
      "docs": {
        "stability": "experimental",
        "summary": "YAML utilities."
      },
      "fqn": "cdk8s.Yaml",
      "kind": "class",
      "locationInModule": {
        "filename": "src/yaml.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "remarks": "Empty documents are filtered out.",
            "returns": "an array of objects, each represents a document inside the YAML",
            "stability": "experimental",
            "summary": "Downloads a set of YAML documents (k8s manifest for example) from a URL or a file and returns them as javascript objects."
          },
          "locationInModule": {
            "filename": "src/yaml.ts",
            "line": 44
          },
          "name": "load",
          "parameters": [
            {
              "docs": {
                "summary": "a URL of a file path to load from."
              },
              "name": "urlOrFile",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Saves a set of objects as a multi-document YAML file."
          },
          "locationInModule": {
            "filename": "src/yaml.ts",
            "line": 16
          },
          "name": "save",
          "parameters": [
            {
              "docs": {
                "summary": "The output path."
              },
              "name": "filePath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The set of objects."
              },
              "name": "docs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "returns": "the path to the temporary file",
            "stability": "experimental",
            "summary": "Saves a set of YAML documents into a temp file (in /tmp)."
          },
          "locationInModule": {
            "filename": "src/yaml.ts",
            "line": 28
          },
          "name": "tmp",
          "parameters": [
            {
              "docs": {
                "summary": "the set of documents to save."
              },
              "name": "docs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Yaml"
    }
  },
  "version": "0.27.0",
  "fingerprint": "CNObiwILSysbf6Lq/dlvxu11CV/dyuUTKV9zT9wQq0s="
}
