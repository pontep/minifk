"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const constructs_1 = require("constructs");
const fs = require("fs");
const chart_1 = require("./chart");
const path = require("path");
const yaml_1 = require("./yaml");
const dependency_1 = require("./dependency");
const api_object_1 = require("./api-object");
/**
 * Represents a cdk8s application.
 */
class App extends constructs_1.Construct {
    /**
     * Defines an app
     * @param options configuration options
     */
    constructor(options = {}) {
        var _a, _b;
        super(undefined, '');
        this.outdir = (_b = (_a = options.outdir) !== null && _a !== void 0 ? _a : process.env.CDK8S_OUTDIR) !== null && _b !== void 0 ? _b : 'dist';
    }
    /**
     * Synthesizes all manifests to the output directory
     */
    synth() {
        fs.mkdirSync(this.outdir, { recursive: true });
        // this is kind of sucky, eventually I would like the DependencyGraph
        // to be able to answer this question.
        const hasDependantCharts = resolveDependencies(this);
        // Since we plan on removing the distributed synth mechanism, we no longer call `Node.synthesize`, but rather simply implement
        // the necessary operations. We do however want to preserve the distributed validation.
        validate(this);
        const simpleManifestNamer = (chart) => `${constructs_1.Node.of(chart).uniqueId}.k8s.yaml`;
        const manifestNamer = hasDependantCharts ? (chart) => `${index.toString().padStart(4, '0')}-${simpleManifestNamer(chart)}` : simpleManifestNamer;
        const charts = new dependency_1.DependencyGraph(constructs_1.Node.of(this)).topology().filter(x => x instanceof chart_1.Chart);
        let index = 0;
        for (const node of charts) {
            const chart = chart_1.Chart.of(node);
            yaml_1.Yaml.save(path.join(this.outdir, manifestNamer(chart)), chartToKube(chart));
            index++;
        }
    }
    /**
     * Synthesize a single chart.
     *
     * Each element returned in the resulting array represents a different ApiObject
     * in the scope of the chart.
     *
     * Note that the returned array order is important. It is determined by the various dependencies between
     * the constructs in the chart, where the first element is the one without dependencies, and so on...
     *
     * @returns An array of JSON objects.
     * @param chart the chart to synthesize.
     * @internal
     */
    static _synthChart(chart) {
        const app = App.of(chart);
        // we must prepare the entire app before synthesizing the chart
        // because the dependency inference happens on the app level.
        resolveDependencies(app);
        // validate the app since we want to call onValidate of the relevant constructs.
        // note this will also call onValidate on constructs from possibly different charts,
        // but thats ok too since we no longer treat constructs as a self-contained synthesis unit.
        validate(app);
        return chartToKube(chart);
    }
    static of(c) {
        const scope = constructs_1.Node.of(c).scope;
        if (!scope) {
            // the app is the only construct without a scope.
            return c;
        }
        return App.of(scope);
    }
}
exports.App = App;
function validate(app) {
    // Note this is a copy-paste of https://github.com/aws/constructs/blob/master/lib/construct.ts#L438.
    const errors = constructs_1.Node.of(app).validate();
    if (errors.length > 0) {
        const errorList = errors.map(e => `[${constructs_1.Node.of(e.source).path}] ${e.message}`).join('\n  ');
        throw new Error(`Validation failed with the following errors:\n  ${errorList}`);
    }
}
function resolveDependencies(app) {
    let hasDependantCharts = false;
    for (const dep of constructs_1.Node.of(app).dependencies) {
        // create explicit api object dependencies from implicit construct dependencies
        const targetApiObjects = constructs_1.Node.of(dep.target).findAll().filter(c => c instanceof api_object_1.ApiObject);
        const sourceApiObjects = constructs_1.Node.of(dep.source).findAll().filter(c => c instanceof api_object_1.ApiObject);
        for (const target of targetApiObjects) {
            for (const source of sourceApiObjects) {
                constructs_1.Node.of(source).addDependency(target);
            }
        }
        // create an explicit chart dependency from implicit construct dependencies
        const sourceChart = chart_1.Chart.of(dep.source);
        const targetChart = chart_1.Chart.of(dep.target);
        if (sourceChart !== targetChart) {
            constructs_1.Node.of(sourceChart).addDependency(targetChart);
            hasDependantCharts = true;
        }
    }
    return hasDependantCharts;
}
function chartToKube(chart) {
    return new dependency_1.DependencyGraph(constructs_1.Node.of(chart)).topology()
        .filter(x => x instanceof api_object_1.ApiObject)
        .map(x => x.toJson());
}
//# sourceMappingURL=data:application/json;base64,