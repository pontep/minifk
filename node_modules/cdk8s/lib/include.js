"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Include = void 0;
const constructs_1 = require("constructs");
const api_object_1 = require("./api-object");
const yaml_1 = require("./yaml");
/**
 * Reads a YAML manifest from a file or a URL and defines all resources as API
 * objects within the defined scope.
 *
 * The names (`metadata.name`) of imported resources will be preserved as-is
 * from the manifest.
 */
class Include extends constructs_1.Construct {
    constructor(scope, name, options) {
        var _a, _b, _c, _d;
        super(scope, name);
        const objects = yaml_1.Yaml.load(options.url);
        let order = 0;
        for (const obj of objects) {
            const name = (_b = (_a = obj.metadata) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : `object${order++}`;
            // render an id: name[-kind][-namespace]
            const id = [name, (_c = obj.kind) === null || _c === void 0 ? void 0 : _c.toLowerCase(), (_d = obj.metadata) === null || _d === void 0 ? void 0 : _d.namespace].filter(x => x).join('-');
            new api_object_1.ApiObject(this, id, obj);
        }
    }
}
exports.Include = Include;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5jbHVkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmNsdWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUF1QztBQUN2Qyw2Q0FBeUM7QUFDekMsaUNBQThCO0FBVzlCOzs7Ozs7R0FNRztBQUNILE1BQWEsT0FBUSxTQUFRLHNCQUFTO0lBQ3BDLFlBQVksS0FBZ0IsRUFBRSxJQUFZLEVBQUUsT0FBdUI7O1FBQ2pFLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFbkIsTUFBTSxPQUFPLEdBQUcsV0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUU7WUFDekIsTUFBTSxJQUFJLGVBQUcsR0FBRyxDQUFDLFFBQVEsMENBQUUsSUFBSSxtQ0FBSSxTQUFTLEtBQUssRUFBRSxFQUFFLENBQUM7WUFFdEQsd0NBQXdDO1lBQ3hDLE1BQU0sRUFBRSxHQUFHLENBQUUsSUFBSSxRQUFFLEdBQUcsQ0FBQyxJQUFJLDBDQUFFLFdBQVcsVUFBSSxHQUFHLENBQUMsUUFBUSwwQ0FBRSxTQUFTLENBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0YsSUFBSSxzQkFBUyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0NBQ0Y7QUFmRCwwQkFlQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQXBpT2JqZWN0IH0gZnJvbSAnLi9hcGktb2JqZWN0JztcbmltcG9ydCB7IFlhbWwgfSBmcm9tICcuL3lhbWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEluY2x1ZGVPcHRpb25zIHtcbiAgLyoqXG4gICAqIExvY2FsIGZpbGUgcGF0aCBvciBVUkwgd2hpY2ggaW5jbHVkZXMgYSBLdWJlcm5ldGVzIFlBTUwgbWFuaWZlc3QuXG4gICAqXG4gICAqIEBleGFtcGxlIG15bWFuaWZlc3QueWFtbFxuICAgKi9cbiAgcmVhZG9ubHkgdXJsOiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVhZHMgYSBZQU1MIG1hbmlmZXN0IGZyb20gYSBmaWxlIG9yIGEgVVJMIGFuZCBkZWZpbmVzIGFsbCByZXNvdXJjZXMgYXMgQVBJXG4gKiBvYmplY3RzIHdpdGhpbiB0aGUgZGVmaW5lZCBzY29wZS5cbiAqXG4gKiBUaGUgbmFtZXMgKGBtZXRhZGF0YS5uYW1lYCkgb2YgaW1wb3J0ZWQgcmVzb3VyY2VzIHdpbGwgYmUgcHJlc2VydmVkIGFzLWlzXG4gKiBmcm9tIHRoZSBtYW5pZmVzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEluY2x1ZGUgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBuYW1lOiBzdHJpbmcsIG9wdGlvbnM6IEluY2x1ZGVPcHRpb25zKSB7XG4gICAgc3VwZXIoc2NvcGUsIG5hbWUpO1xuXG4gICAgY29uc3Qgb2JqZWN0cyA9IFlhbWwubG9hZChvcHRpb25zLnVybCk7XG5cbiAgICBsZXQgb3JkZXIgPSAwO1xuICAgIGZvciAoY29uc3Qgb2JqIG9mIG9iamVjdHMpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBvYmoubWV0YWRhdGE/Lm5hbWUgPz8gYG9iamVjdCR7b3JkZXIrK31gO1xuXG4gICAgICAvLyByZW5kZXIgYW4gaWQ6IG5hbWVbLWtpbmRdWy1uYW1lc3BhY2VdXG4gICAgICBjb25zdCBpZCA9IFsgbmFtZSwgb2JqLmtpbmQ/LnRvTG93ZXJDYXNlKCksIG9iai5tZXRhZGF0YT8ubmFtZXNwYWNlIF0uZmlsdGVyKHggPT4geCkuam9pbignLScpO1xuICAgICAgbmV3IEFwaU9iamVjdCh0aGlzLCBpZCwgb2JqKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==