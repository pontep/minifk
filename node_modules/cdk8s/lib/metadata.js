"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiObjectMetadataDefinition = void 0;
const _util_1 = require("./_util");
/**
 * Object metadata.
 */
class ApiObjectMetadataDefinition {
    constructor(options = {}) {
        var _a, _b;
        this.name = options.name;
        this.labels = (_a = options.labels) !== null && _a !== void 0 ? _a : {};
        this.annotations = (_b = options.annotations) !== null && _b !== void 0 ? _b : {};
        this.namespace = options.namespace;
        this._additionalAttributes = options !== null && options !== void 0 ? options : {};
    }
    /**
     * Add a label.
     *
     * @param key - The key.
     * @param value - The value.
     */
    addLabel(key, value) {
        this.labels[key] = value;
    }
    /**
     * @returns a value of a label or undefined
     * @param key the label
     */
    getLabel(key) {
        return this.labels[key];
    }
    /**
     * Add an annotation.
     *
     * @param key - The key.
     * @param value - The value.
     */
    addAnnotation(key, value) {
        this.annotations[key] = value;
    }
    /**
     * Adds an arbitrary key/value to the object metadata.
     * @param key Metadata key
     * @param value Metadata value
     */
    add(key, value) {
        this._additionalAttributes[key] = value;
    }
    /**
     * Synthesizes a k8s ObjectMeta for this metadata set.
     */
    toJson() {
        const sanitize = (x) => _util_1.sanitizeValue(x, { filterEmptyArrays: true, filterEmptyObjects: true });
        return sanitize({
            ...this._additionalAttributes,
            name: this.name,
            namespace: this.namespace,
            annotations: this.annotations,
            labels: this.labels,
        });
    }
}
exports.ApiObjectMetadataDefinition = ApiObjectMetadataDefinition;
//# sourceMappingURL=data:application/json;base64,