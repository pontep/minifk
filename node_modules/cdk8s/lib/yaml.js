"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Yaml = void 0;
const fs = require("fs");
const YAML = require("yaml");
const child_process_1 = require("child_process");
const os = require("os");
const path = require("path");
/**
 * YAML utilities.
 */
class Yaml {
    /**
     * Saves a set of objects as a multi-document YAML file.
     * @param filePath The output path
     * @param docs The set of objects
     */
    static save(filePath, docs) {
        // convert each resource to yaml and separate with a '---' line
        const data = docs.map(r => YAML.stringify(r)).join('---\n');
        fs.writeFileSync(filePath, data, { encoding: 'utf-8' });
    }
    /**
     * Saves a set of YAML documents into a temp file (in /tmp)
     *
     * @returns the path to the temporary file
     * @param docs the set of documents to save
     */
    static tmp(docs) {
        const tmpdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdk8s-'));
        const filePath = path.join(tmpdir, 'temp.yaml');
        Yaml.save(filePath, docs);
        return filePath;
    }
    /**
     * Downloads a set of YAML documents (k8s manifest for example) from a URL or
     * a file and returns them as javascript objects.
     *
     * Empty documents are filtered out.
     *
     * @param urlOrFile a URL of a file path to load from
     * @returns an array of objects, each represents a document inside the YAML
     */
    static load(urlOrFile) {
        const body = loadurl(urlOrFile);
        const objects = YAML.parseAllDocuments(body);
        const result = new Array();
        for (const obj of objects.map(x => x.toJSON())) {
            // skip empty documents
            if (obj === undefined) {
                continue;
            }
            if (obj === null) {
                continue;
            }
            if (Array.isArray(obj) && obj.length === 0) {
                continue;
            }
            if (typeof (obj) === 'object' && Object.keys(obj).length === 0) {
                continue;
            }
            result.push(obj);
        }
        return result;
    }
    /**
     * Utility class.
     */
    constructor() {
        return;
    }
}
exports.Yaml = Yaml;
/**
 * Loads a url (or file) and returns the contents.
 * This method spawns a child process in order to perform an http call synchronously.
 */
function loadurl(url) {
    const loadurl = path.join(__dirname, '_loadurl.js');
    return child_process_1.execFileSync(process.execPath, [loadurl, url], { encoding: 'utf-8' }).toString();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFtbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy95YW1sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsaURBQTZDO0FBQzdDLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFFN0I7O0dBRUc7QUFDSCxNQUFhLElBQUk7SUFDZjs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFnQixFQUFFLElBQVc7UUFDOUMsK0RBQStEO1FBQy9ELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVELEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBVztRQUMzQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDaEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUIsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFpQjtRQUNsQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxFQUFPLENBQUM7UUFFaEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7WUFDOUMsdUJBQXVCO1lBQ3ZCLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtnQkFBRSxTQUFTO2FBQUU7WUFDcEMsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO2dCQUFFLFNBQVM7YUFBRTtZQUMvQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQUUsU0FBUzthQUFFO1lBQ3pELElBQUksT0FBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQUUsU0FBUzthQUFFO1lBRTVFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbEI7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7O09BRUc7SUFDSDtRQUNFLE9BQU87SUFDVCxDQUFDO0NBQ0Y7QUExREQsb0JBMERDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxPQUFPLENBQUMsR0FBVztJQUMxQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNwRCxPQUFPLDRCQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFFLE9BQU8sRUFBRSxHQUFHLENBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO0FBQzNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBZQU1MIGZyb20gJ3lhbWwnO1xuaW1wb3J0IHsgZXhlY0ZpbGVTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vKipcbiAqIFlBTUwgdXRpbGl0aWVzLlxuICovXG5leHBvcnQgY2xhc3MgWWFtbCB7XG4gIC8qKlxuICAgKiBTYXZlcyBhIHNldCBvZiBvYmplY3RzIGFzIGEgbXVsdGktZG9jdW1lbnQgWUFNTCBmaWxlLlxuICAgKiBAcGFyYW0gZmlsZVBhdGggVGhlIG91dHB1dCBwYXRoXG4gICAqIEBwYXJhbSBkb2NzIFRoZSBzZXQgb2Ygb2JqZWN0c1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzYXZlKGZpbGVQYXRoOiBzdHJpbmcsIGRvY3M6IGFueVtdKSB7XG4gICAgLy8gY29udmVydCBlYWNoIHJlc291cmNlIHRvIHlhbWwgYW5kIHNlcGFyYXRlIHdpdGggYSAnLS0tJyBsaW5lXG4gICAgY29uc3QgZGF0YSA9IGRvY3MubWFwKHIgPT4gWUFNTC5zdHJpbmdpZnkocikpLmpvaW4oJy0tLVxcbicpO1xuICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIGRhdGEsIHsgZW5jb2Rpbmc6ICd1dGYtOCcgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZXMgYSBzZXQgb2YgWUFNTCBkb2N1bWVudHMgaW50byBhIHRlbXAgZmlsZSAoaW4gL3RtcClcbiAgICpcbiAgICogQHJldHVybnMgdGhlIHBhdGggdG8gdGhlIHRlbXBvcmFyeSBmaWxlXG4gICAqIEBwYXJhbSBkb2NzIHRoZSBzZXQgb2YgZG9jdW1lbnRzIHRvIHNhdmVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdG1wKGRvY3M6IGFueVtdKTogc3RyaW5nIHtcbiAgICBjb25zdCB0bXBkaXIgPSBmcy5ta2R0ZW1wU3luYyhwYXRoLmpvaW4ob3MudG1wZGlyKCksICdjZGs4cy0nKSk7XG4gICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4odG1wZGlyLCAndGVtcC55YW1sJyk7XG4gICAgWWFtbC5zYXZlKGZpbGVQYXRoLCBkb2NzKTtcbiAgICByZXR1cm4gZmlsZVBhdGg7XG4gIH1cblxuICAvKipcbiAgICogRG93bmxvYWRzIGEgc2V0IG9mIFlBTUwgZG9jdW1lbnRzIChrOHMgbWFuaWZlc3QgZm9yIGV4YW1wbGUpIGZyb20gYSBVUkwgb3JcbiAgICogYSBmaWxlIGFuZCByZXR1cm5zIHRoZW0gYXMgamF2YXNjcmlwdCBvYmplY3RzLlxuICAgKlxuICAgKiBFbXB0eSBkb2N1bWVudHMgYXJlIGZpbHRlcmVkIG91dC5cbiAgICpcbiAgICogQHBhcmFtIHVybE9yRmlsZSBhIFVSTCBvZiBhIGZpbGUgcGF0aCB0byBsb2FkIGZyb21cbiAgICogQHJldHVybnMgYW4gYXJyYXkgb2Ygb2JqZWN0cywgZWFjaCByZXByZXNlbnRzIGEgZG9jdW1lbnQgaW5zaWRlIHRoZSBZQU1MXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGxvYWQodXJsT3JGaWxlOiBzdHJpbmcpOiBhbnlbXSB7XG4gICAgY29uc3QgYm9keSA9IGxvYWR1cmwodXJsT3JGaWxlKTtcbiAgICBjb25zdCBvYmplY3RzID0gWUFNTC5wYXJzZUFsbERvY3VtZW50cyhib2R5KTtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXk8YW55PigpO1xuXG4gICAgZm9yIChjb25zdCBvYmogb2Ygb2JqZWN0cy5tYXAoeCA9PiB4LnRvSlNPTigpKSkge1xuICAgICAgLy8gc2tpcCBlbXB0eSBkb2N1bWVudHNcbiAgICAgIGlmIChvYmogPT09IHVuZGVmaW5lZCkgeyBjb250aW51ZTsgfVxuICAgICAgaWYgKG9iaiA9PT0gbnVsbCkgeyBjb250aW51ZTsgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID09PSAwKSB7IGNvbnRpbnVlOyB9XG4gICAgICBpZiAodHlwZW9mKG9iaikgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwKSB7IGNvbnRpbnVlOyB9XG5cbiAgICAgIHJlc3VsdC5wdXNoKG9iaik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVdGlsaXR5IGNsYXNzLlxuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICByZXR1cm47XG4gIH1cbn1cblxuLyoqXG4gKiBMb2FkcyBhIHVybCAob3IgZmlsZSkgYW5kIHJldHVybnMgdGhlIGNvbnRlbnRzLlxuICogVGhpcyBtZXRob2Qgc3Bhd25zIGEgY2hpbGQgcHJvY2VzcyBpbiBvcmRlciB0byBwZXJmb3JtIGFuIGh0dHAgY2FsbCBzeW5jaHJvbm91c2x5LlxuICovXG5mdW5jdGlvbiBsb2FkdXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgbG9hZHVybCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdfbG9hZHVybC5qcycpO1xuICByZXR1cm4gZXhlY0ZpbGVTeW5jKHByb2Nlc3MuZXhlY1BhdGgsIFsgbG9hZHVybCwgdXJsIF0sIHsgZW5jb2Rpbmc6ICd1dGYtOCcgfSkudG9TdHJpbmcoKVxufVxuXG4iXX0=